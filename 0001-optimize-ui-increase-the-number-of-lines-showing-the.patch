From 67cf52a42dab76ccd3c627ed25dd74ef1b327242 Mon Sep 17 00:00:00 2001
From: lzl <2233788867@qq.com>
Date: Tue, 7 Jan 2025 07:01:44 +0800
Subject: [PATCH] optimize (ui): increase the number of lines showing the
 searched video names to 2

---
 app/build.gradle                              |   2 -
 .../main/java/com/liuzhenlin/videos/App.java  |   1 -
 .../com/liuzhenlin/videos/model/BaseModel.kt  |   4 +-
 .../videos/model/BaseRepository.java          |  12 +-
 .../videos/model/FeedbackRepository.java      |   9 +-
 .../videos/model/FeedbackRepositoryImpl.java  |  31 +-
 .../model/LocalSearchedVideoListModel.kt      |  66 +-
 .../videos/model/LocalVideoListModel.kt       |  90 +-
 .../videos/model/OnlineVideoListModel.kt      |   3 +-
 .../videos/model/VideoMoveRepository.kt       |  18 +-
 .../videos/model/VideoRepository.java         |   8 +-
 .../videos/model/VideoRepositoryImpl.java     | 145 +--
 .../videos/presenter/FeedbackPresenter.java   |  20 +-
 .../videos/presenter/IFeedbackPresenter.java  |   5 +-
 .../videos/presenter/IVideoPresenter.java     |   5 +-
 .../presenter/LocalSearchedVideosPresenter.kt |  15 +-
 .../presenter/LocalVideoListPresenter.kt      |  26 +-
 .../videos/presenter/Presenter.java           |  38 +-
 .../videos/presenter/VideoMovePresenter.kt    |   8 +-
 .../videos/presenter/VideoPresenter.java      |  39 +-
 .../view/activity/FeedbackActivity.java       |   4 +-
 .../videos/view/activity/MainActivity.java    |  47 +-
 .../videos/view/activity/VideoActivity.java   | 122 +--
 .../fragment/LocalSearchedVideosFragment.kt   |  62 +-
 .../view/fragment/LocalVideoListFragment.kt   |  75 +-
 .../view/fragment/LocalVideosFragment.kt      |  39 +-
 .../videos/view/fragment/VideoMoveFragment.kt |  30 +-
 common_build.gradle                           |   2 +
 .../LifecycleCoroutineScopeImplAccessor.java  |  24 +
 .../androidx/lifecycle/ViewModelAccessor.java |  25 +
 .../common/utils/CloseableCoroutineScope.kt   |  20 +
 .../com/liuzhenlin/common/utils/Coroutines.kt | 198 +++++
 .../liuzhenlin/common/utils/JCoroutine.java   | 134 +++
 .../com/liuzhenlin/common/utils/JavaOnly.java |  22 +
 .../common/utils/ReflectionUtils.java         |  28 +
 .../web/youtube/YoutubePlaybackService.java   | 831 ------------------
 .../web/youtube/YoutubePlaybackService.kt     | 791 +++++++++++++++++
 37 files changed, 1815 insertions(+), 1184 deletions(-)
 create mode 100644 libraries/common/src/main/java/androidx/lifecycle/LifecycleCoroutineScopeImplAccessor.java
 create mode 100644 libraries/common/src/main/java/androidx/lifecycle/ViewModelAccessor.java
 create mode 100644 libraries/common/src/main/java/com/liuzhenlin/common/utils/CloseableCoroutineScope.kt
 create mode 100644 libraries/common/src/main/java/com/liuzhenlin/common/utils/Coroutines.kt
 create mode 100644 libraries/common/src/main/java/com/liuzhenlin/common/utils/JCoroutine.java
 create mode 100644 libraries/common/src/main/java/com/liuzhenlin/common/utils/JavaOnly.java
 delete mode 100644 web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.java
 create mode 100644 web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.kt

diff --git a/app/build.gradle b/app/build.gradle
index eff18ff..73d0ce6 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -1,5 +1,4 @@
 apply plugin: 'com.android.application'
-apply plugin: 'kotlin-android'
 
 apply from: "$rootDir/common_build.gradle"
 
@@ -41,7 +40,6 @@ android {
 }
 
 dependencies {
-    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
     implementation 'androidx.multidex:multidex:2.0.1'
     implementation 'androidx.core:core-splashscreen:1.0.1'
 
diff --git a/app/src/main/java/com/liuzhenlin/videos/App.java b/app/src/main/java/com/liuzhenlin/videos/App.java
index ddf8fc8..fe52c8f 100644
--- a/app/src/main/java/com/liuzhenlin/videos/App.java
+++ b/app/src/main/java/com/liuzhenlin/videos/App.java
@@ -70,7 +70,6 @@ public class App extends Application {
     public void onCreate() {
         super.onCreate();
         sApp = this;
-
         Executors.THREAD_POOL_EXECUTOR.execute(new CrashMailReporter(this)::send);
         Thread.setDefaultUncaughtExceptionHandler(LogOnCrashHandler.INSTANCE.get(this));
 
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/BaseModel.kt b/app/src/main/java/com/liuzhenlin/videos/model/BaseModel.kt
index 9da51e4..63522f7 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/BaseModel.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/model/BaseModel.kt
@@ -8,11 +8,13 @@ package com.liuzhenlin.videos.model
 import android.annotation.SuppressLint
 import android.content.Context
 import android.os.AsyncTask
+import kotlinx.coroutines.CoroutineScope
 
 /**
  * @author 刘振林
  */
-abstract class BaseModel<Progress, Result, Callback : BaseModel.Callback>(context: Context) {
+abstract class BaseModel<Progress, Result, Callback : BaseModel.Callback>(
+        context: Context, protected val mCoroutineScope: CoroutineScope) {
 
     @Suppress("RemoveEmptyClassBody")
     interface Callback {
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/BaseRepository.java b/app/src/main/java/com/liuzhenlin/videos/model/BaseRepository.java
index 3bc16b3..b406c24 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/BaseRepository.java
+++ b/app/src/main/java/com/liuzhenlin/videos/model/BaseRepository.java
@@ -10,15 +10,17 @@ import android.content.Context;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
+import kotlinx.coroutines.CoroutineScope;
+
 public abstract class BaseRepository<C extends Repository.Callback> implements Repository<C> {
 
-    @NonNull
-    protected final Context mContext;
-    @Nullable
-    protected C mCallback;
+    @NonNull protected final CoroutineScope mCoroutineScope;
+    @NonNull protected final Context mContext;
+    @Nullable protected C mCallback;
 
-    public BaseRepository(@NonNull Context context) {
+    public BaseRepository(@NonNull Context context, @NonNull CoroutineScope coroutineScope) {
         mContext = context.getApplicationContext();
+        mCoroutineScope = coroutineScope;
     }
 
     @Override
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepository.java b/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepository.java
index 9783cd5..495f651 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepository.java
+++ b/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepository.java
@@ -13,13 +13,16 @@ import androidx.annotation.Nullable;
 
 import java.util.List;
 
+import kotlinx.coroutines.CoroutineScope;
+
 public interface FeedbackRepository extends Repository<FeedbackRepository.Callback> {
 
     @NonNull
     static FeedbackRepository create(
-            @NonNull Context context, @NonNull UserFilledTextsFetcher userTextsFetcher,
-            int maxCountOfPicturesToUpload) {
-        return new FeedbackRepositoryImpl(context, userTextsFetcher, maxCountOfPicturesToUpload);
+            @NonNull Context context, @NonNull CoroutineScope coroutineScope,
+            @NonNull UserFilledTextsFetcher userTextsFetcher, int maxCountOfPicturesToUpload) {
+        return new FeedbackRepositoryImpl(
+                context, coroutineScope, userTextsFetcher, maxCountOfPicturesToUpload);
     }
 
     @NonNull List<Bitmap> getPictures();
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepositoryImpl.java b/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepositoryImpl.java
index 029a12d..161c071 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepositoryImpl.java
+++ b/app/src/main/java/com/liuzhenlin/videos/model/FeedbackRepositoryImpl.java
@@ -8,6 +8,7 @@ package com.liuzhenlin.videos.model;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.os.Bundle;
+import android.util.Log;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -15,8 +16,7 @@ import androidx.appcompat.content.res.AppCompatResources;
 
 import com.liuzhenlin.common.Consts;
 import com.liuzhenlin.common.utils.BitmapUtils;
-import com.liuzhenlin.common.utils.Executors;
-import com.liuzhenlin.common.utils.Utils;
+import com.liuzhenlin.common.utils.JCoroutine;
 import com.liuzhenlin.videos.R;
 import com.liuzhenlin.videos.bean.FeedbackInfo;
 import com.liuzhenlin.videos.dao.FeedbackSavedPrefs;
@@ -27,13 +27,18 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
+
+import kotlinx.coroutines.CoroutineScope;
+import kotlinx.coroutines.CoroutineScopeKt;
+import kotlinx.coroutines.Dispatchers;
 
 import static com.liuzhenlin.common.Consts.EMPTY_STRING;
 
 class FeedbackRepositoryImpl extends BaseRepository<FeedbackRepository.Callback>
         implements FeedbackRepository {
 
+    private static final String TAG = "FeedbackRepository";
+
     private final UserFilledTextsFetcher mUserFilledTextsFetcher;
     private final FeedbackSavedPrefs mFeedbackSPs;
     private final FeedbackInfo mSavedFeedbackInfo;
@@ -51,9 +56,9 @@ class FeedbackRepositoryImpl extends BaseRepository<FeedbackRepository.Callback>
     private static final String KEY_FILLED_PICTURE_PATHS = "kfpp";
 
     public FeedbackRepositoryImpl(
-            @NonNull Context context, @NonNull UserFilledTextsFetcher userTextsFetcher,
-            int maxCountOfPicturesToUpload) {
-        super(context);
+            @NonNull Context context, @NonNull CoroutineScope coroutineScope,
+            @NonNull UserFilledTextsFetcher userTextsFetcher, int maxCountOfPicturesToUpload) {
+        super(context, coroutineScope);
         mUserFilledTextsFetcher = userTextsFetcher;
         mFeedbackSPs = new FeedbackSavedPrefs(context);
         mSavedFeedbackInfo = new FeedbackInfo();
@@ -176,20 +181,14 @@ class FeedbackRepositoryImpl extends BaseRepository<FeedbackRepository.Callback>
         final List<String> picturePaths = mPicturePaths;
         if (picturePath != null && !picturePaths.contains(picturePath)) {
             picturePaths.add(picturePath);
-            Executors.SERIAL_EXECUTOR.execute(() -> {
-                final AtomicBoolean pictureRemoved = new AtomicBoolean();
-                Utils.runOnHandlerSync(Executors.MAIN_EXECUTOR.getHandler(),
-                        () -> {
-                            if (!picturePaths.contains(picturePath)) {
-                                pictureRemoved.set(true);
-                            }
-                        });
-                if (pictureRemoved.get()) {
+            JCoroutine.launch(mCoroutineScope, JCoroutine.SingleDispatcher, () -> {
+                if (JCoroutine.runBlocking(
+                        Dispatchers.getMain(), () -> !picturePaths.contains(picturePath), false)) {
                     return;
                 }
                 final Bitmap bitmap = BitmapUtils.decodeRotatedBitmapFormFile(picturePath);
                 if (bitmap != null) {
-                    Executors.MAIN_EXECUTOR.post(() -> {
+                    JCoroutine.launch(mCoroutineScope, Dispatchers.getMain(), () -> {
                         if (picturePaths.contains(picturePath)) {
                             List<String> loadedPicturePaths = mLoadedPicturePaths;
                             List<Bitmap> pictures = mPictures;
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/LocalSearchedVideoListModel.kt b/app/src/main/java/com/liuzhenlin/videos/model/LocalSearchedVideoListModel.kt
index 3128436..c7bb1a6 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/LocalSearchedVideoListModel.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/model/LocalSearchedVideoListModel.kt
@@ -10,6 +10,7 @@ import android.content.Context
 import android.os.AsyncTask
 import com.liuzhenlin.common.Consts
 import com.liuzhenlin.common.Consts.EMPTY_STRING
+import com.liuzhenlin.common.utils.AppScope
 import com.liuzhenlin.common.utils.Executors
 import com.liuzhenlin.videos.SORT_MODE_RELEVANCY_DESC
 import com.liuzhenlin.videos.allEqual
@@ -25,6 +26,11 @@ import com.liuzhenlin.videos.view.fragment.VideoListItemDeleteOnDiskListener
 import com.liuzhenlin.videos.view.fragment.VideoListItemRenameResultCallback
 import com.liuzhenlin.videos.view.fragment.deleteOnDisk
 import com.liuzhenlin.videos.view.fragment.renameTo
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
 
 /**
  * @author 刘振林
@@ -56,9 +62,10 @@ interface ILocalSearchedVideoListModel {
     }
 }
 
-class LocalSearchedVideoListModel(context: Context)
-    : BaseModel<Nothing, MutableList<Video>?, ILocalSearchedVideoListModel.Callback>(context),
-        ILocalSearchedVideoListModel {
+class LocalSearchedVideoListModel(context: Context, coroutineScope: CoroutineScope) :
+    BaseModel<Nothing, MutableList<Video>?, ILocalSearchedVideoListModel.Callback>(
+        context, coroutineScope),
+    ILocalSearchedVideoListModel {
 
     private val mVideos = arrayListOf<Video>()
     private val mSearchCache = SearchCache()
@@ -243,10 +250,11 @@ class LocalSearchedVideoListModel(context: Context)
     }
 
     override fun deleteVideo(video: Video, listener: VideoListItemDeleteOnDiskListener<Video>?) {
+        val video1 = video.shallowCopy<Video>()
         listener?.onItemsDeleteStart(video)
-        Executors.THREAD_POOL_EXECUTOR.execute {
-            arrayOf(video).deleteOnDisk()
-            Executors.MAIN_EXECUTOR.execute {
+        AppScope.launch(Dispatchers.IO) {
+            arrayOf(video1).deleteOnDisk()
+            withContext(Dispatchers.Main) {
                 listener?.onItemsDeleteFinish(video)
             }
         }
@@ -261,27 +269,37 @@ class LocalSearchedVideoListModel(context: Context)
     }
 
     override fun renameVideoTo(video: Video, callback: VideoListItemRenameResultCallback<Video>?) {
-        val idx = mVideos.indexOf(video)
+        var idx = mVideos.indexOf(video)
         if (idx >= 0) {
             val v = mVideos[idx]
 
-            if (!v.renameTo(video.name, callback))
-                return
-
-            v.name = video.name
-            mVideos.sortByElementName()
-
-            // Use v for index search because its id might have been updated in the above
-            // v.renameTo() method invocation
-            val index = mSearchedVideos.indexOf(v)
-            if (index >= 0) {
-                mSearchedVideos[index].name = video.name
-                if (computeVideoRelevancy(mSearchedVideos[index]) > 0) {
-                    mSearchedVideos.sort(mSearchedVideosSortMode)
-                    mCallback?.onSearchedVideoRenamed(index, mSearchedVideos.indexOf(v))
-                } else {
-                    mSearchedVideos.removeAt(index)
-                    mCallback?.onSearchedVideoDeleted(index)
+            val v1 = v.shallowCopy<Video>()
+            val newName = video.name
+            AppScope.launch(Dispatchers.IO) {
+                if (!v1.renameTo(newName, callback))
+                    return@launch
+
+                val v2 = v1.shallowCopy<Video>()
+                withContext(mCoroutineScope.coroutineContext[Job]!! + Dispatchers.Main) {
+                    // Use v for index search because its id might have been updated in the above
+                    // v1.renameTo() method invocation
+                    idx = mVideos.indexOf(v)
+                    if (idx >= 0) {
+                        mVideos[idx] = v2
+                        mVideos.sortByElementName()
+
+                        val index = mSearchedVideos.indexOf(v)
+                        if (index >= 0) {
+                            mSearchedVideos[index] = v2
+                            if (computeVideoRelevancy(mSearchedVideos[index]) > 0) {
+                                mSearchedVideos.sort(mSearchedVideosSortMode)
+                                mCallback?.onSearchedVideoRenamed(index, mSearchedVideos.indexOf(v2))
+                            } else {
+                                mSearchedVideos.removeAt(index)
+                                mCallback?.onSearchedVideoDeleted(index)
+                            }
+                        }
+                    }
                 }
             }
         }
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/LocalVideoListModel.kt b/app/src/main/java/com/liuzhenlin/videos/model/LocalVideoListModel.kt
index 8a83caf..2415ed9 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/LocalVideoListModel.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/model/LocalVideoListModel.kt
@@ -12,6 +12,7 @@ import android.os.AsyncTask
 import android.os.Environment
 import android.os.Handler
 import com.liuzhenlin.common.Consts
+import com.liuzhenlin.common.utils.AppScope
 import com.liuzhenlin.common.utils.Executors
 import com.liuzhenlin.common.utils.FileUtils
 import com.liuzhenlin.videos.*
@@ -25,6 +26,11 @@ import com.liuzhenlin.videos.view.fragment.VideoListItemDeleteOnDiskListener
 import com.liuzhenlin.videos.view.fragment.VideoListItemRenameResultCallback
 import com.liuzhenlin.videos.view.fragment.deleteOnDisk
 import com.liuzhenlin.videos.view.fragment.renameTo
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
 import java.io.File
 import java.util.LinkedList
 
@@ -72,9 +78,12 @@ interface ILocalVideoListModel {
     }
 }
 
-class LocalVideoListModel(context: Context, override val parentVideoDir: VideoDirectory? = null)
-    : BaseModel<Nothing, MutableList<VideoListItem>?, ILocalVideoListModel.Callback>(context),
-        ILocalVideoListModel {
+class LocalVideoListModel(
+    context: Context, override val parentVideoDir: VideoDirectory? = null,
+    coroutineScope: CoroutineScope
+) : BaseModel<Nothing, MutableList<VideoListItem>?, ILocalVideoListModel.Callback>(
+        context, coroutineScope),
+    ILocalVideoListModel {
 
     private val mVideoListItems: MutableList<VideoListItem> =
             parentVideoDir?.videoListItems ?: mutableListOf()
@@ -310,14 +319,15 @@ class LocalVideoListModel(context: Context, override val parentVideoDir: VideoDi
     }
 
     override fun updateVideoDirectory(videodir: VideoDirectory) {
+        val dirPath = videodir.path
         loop@ for ((i, item) in mVideoListItems.withIndex()) {
-            if (item.path != videodir.path) continue@loop
+            if (item.path != dirPath) continue@loop
 
             val dao = VideoListItemDao.getSingleton(mContext)
             when (videodir.videoCount()) {
                 0 -> {
                     if (item is VideoDirectory) {
-                        dao.deleteVideoDir(item.path)
+                        AppScope.launch(Dispatchers.IO) { dao.deleteVideoDir(dirPath) }
                     }
 
                     mVideoListItems.removeAt(i)
@@ -331,15 +341,25 @@ class LocalVideoListModel(context: Context, override val parentVideoDir: VideoDi
                     if (item is Video || compactVideoDir) {
                         if (compactVideoDir) {
                             val vd = videodir.videoListItems[0]
-                            if (vd.isTopped) {
-                                vd.isTopped = false
-                                dao.setVideoListItemTopped(vd, false)
+                            AppScope.launch(Dispatchers.Main.immediate) {
+                                if (vd.isTopped) {
+                                    vd.isTopped = false
+                                    val vd1 = vd.shallowCopy<Video>()
+                                    launch(Dispatchers.IO) {
+                                        dao.setVideoListItemTopped(vd1, false)
+                                    }
+                                }
+                                withContext(Dispatchers.IO) {
+                                    dao.deleteVideoDir(dirPath)
+                                }
                             }
-                            dao.deleteVideoDir(videodir.path)
                         } else {
                             if (videodir.isTopped) {
                                 videodir.isTopped = false
-                                dao.setVideoListItemTopped(videodir, false)
+                                val videodir1 = videodir.shallowCopy<VideoDirectory>()
+                                AppScope.launch(Dispatchers.IO) {
+                                    dao.setVideoListItemTopped(videodir1, false)
+                                }
                             }
                         }
 
@@ -411,7 +431,10 @@ class LocalVideoListModel(context: Context, override val parentVideoDir: VideoDi
         val item = mVideoListItems[index]
         if (item.isTopped != topped) {
             item.isTopped = topped
-            VideoListItemDao.getSingleton(mContext).setVideoListItemTopped(item, topped)
+            val item1 = item.shallowCopy<VideoListItem>()
+            AppScope.launch(Dispatchers.IO) {
+                VideoListItemDao.getSingleton(mContext).setVideoListItemTopped(item1, topped)
+            }
 
             val newIndex = mVideoListItems.reordered(itemsSortMode).indexOf(item)
             if (newIndex != index) {
@@ -435,10 +458,13 @@ class LocalVideoListModel(context: Context, override val parentVideoDir: VideoDi
 
     private fun deleteItemsOnDisk(vararg items: VideoListItem,
                                   listener: VideoListItemDeleteOnDiskListener<VideoListItem>?) {
+        val items1 = items.clone().onEach {
+            if (it is Video) it.shallowCopy<Video>() else it.deepCopy<VideoListItem>()
+        }
         listener?.onItemsDeleteStart(*items)
-        Executors.THREAD_POOL_EXECUTOR.execute {
-            items.deleteOnDisk()
-            Executors.MAIN_EXECUTOR.execute {
+        AppScope.launch(Dispatchers.IO) {
+            items1.deleteOnDisk()
+            withContext(Dispatchers.Main) {
                 listener?.onItemsDeleteFinish(*items)
             }
         }
@@ -469,20 +495,31 @@ class LocalVideoListModel(context: Context, override val parentVideoDir: VideoDi
 
     override fun renameItemTo(
             item: VideoListItem, callback: VideoListItemRenameResultCallback<VideoListItem>?) {
-        val index = mVideoListItems.indexOf(item)
+        var index = mVideoListItems.indexOf(item)
         if (index >= 0) {
             val i = mVideoListItems[index]
 
-            if (!i.renameTo(item.name, callback))
-                return
-
-            // Use i for index search because its id/path might have been updated in the above
-            // i.renameTo() method invocation
-            val newIndex = mVideoListItems.reordered(itemsSortMode).indexOf(i)
-            if (newIndex != index) {
-                mVideoListItems.add(newIndex, mVideoListItems.removeAt(index))
+            val i1 = i.shallowCopy<VideoListItem>()
+            val newName = item.name
+            AppScope.launch(Dispatchers.IO) {
+                if (!i1.renameTo(newName, callback))
+                    return@launch
+
+                val i2 = i1.shallowCopy<VideoListItem>()
+                withContext(mCoroutineScope.coroutineContext[Job]!! + Dispatchers.Main) {
+                    // Use i for index search because its id/path might have been updated in
+                    // the above i1.renameTo() method invocation
+                    index = mVideoListItems.indexOf(i)
+                    if (index >= 0) {
+                        mVideoListItems[index] = i2
+                        val newIndex = mVideoListItems.reordered(itemsSortMode).indexOf(i2)
+                        if (newIndex != index) {
+                            mVideoListItems.add(newIndex, mVideoListItems.removeAt(index))
+                        }
+                        mCallback?.onItemRenamed(index, newIndex)
+                    }
+                }
             }
-            mCallback?.onItemRenamed(index, newIndex)
         }
     }
 
@@ -514,7 +551,10 @@ class LocalVideoListModel(context: Context, override val parentVideoDir: VideoDi
             AppPrefs.getSingleton(mContext).edit().setLocalVideoListItemsSortMode(sortMode).apply()
         } else {
             parentVideoDir.itemsSortMode = sortMode
-            VideoListItemDao.getSingleton(mContext).updateVideoDir(parentVideoDir)
+            val parentVideoDir1 = parentVideoDir.shallowCopy<VideoDirectory>()
+            AppScope.launch(Dispatchers.IO) {
+                VideoListItemDao.getSingleton(mContext).updateVideoDir(parentVideoDir1)
+            }
         }
         mVideoListItems.set(mVideoListItems.reordered(sortMode))
         mCallback?.onAllItemsReordered(sortMode)
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/OnlineVideoListModel.kt b/app/src/main/java/com/liuzhenlin/videos/model/OnlineVideoListModel.kt
index 2a64582..a3c044a 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/OnlineVideoListModel.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/model/OnlineVideoListModel.kt
@@ -12,6 +12,7 @@ import androidx.core.util.AtomicFile
 import com.google.gson.Gson
 import com.liuzhenlin.common.Configs
 import com.liuzhenlin.common.Consts
+import com.liuzhenlin.common.utils.AppScope
 import com.liuzhenlin.common.utils.Executors
 import com.liuzhenlin.common.utils.IOUtils
 import com.liuzhenlin.common.utils.Utils
@@ -25,7 +26,7 @@ import java.net.URL
  * @author 刘振林
  */
 class OnlineVideoListModel(context: Context)
-    : BaseModel<Nothing, Array<TVGroup>?, BaseModel.Callback>(context) {
+    : BaseModel<Nothing, Array<TVGroup>?, BaseModel.Callback>(context, AppScope /* unused */) {
 
     override fun createAndStartLoader(): AsyncTask<*, *, *> {
         val loader = LoadTVsAsyncTask()
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/VideoMoveRepository.kt b/app/src/main/java/com/liuzhenlin/videos/model/VideoMoveRepository.kt
index 9d33369..b888a66 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/VideoMoveRepository.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/model/VideoMoveRepository.kt
@@ -7,7 +7,7 @@ package com.liuzhenlin.videos.model
 
 import android.content.Context
 import android.os.Bundle
-import com.liuzhenlin.common.utils.Executors
+import com.liuzhenlin.common.utils.AppScope
 import com.liuzhenlin.common.utils.FileUtils
 import com.liuzhenlin.common.utils.LateinitProperty
 import com.liuzhenlin.common.utils.Regex
@@ -23,6 +23,10 @@ import com.liuzhenlin.videos.insertVideoDir
 import com.liuzhenlin.videos.suffix
 import com.liuzhenlin.videos.title
 import com.liuzhenlin.videos.videoCount
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
 import java.io.File
 
 /**
@@ -55,14 +59,14 @@ interface VideoMoveRepository : Repository<VideoMoveRepository.Callback> {
 
     companion object {
         @JvmStatic
-        fun create(context: Context, args: Bundle?): VideoMoveRepository {
-            return VideoMoveRepositoryImpl(context, args)
+        fun create(context: Context, coroutine: CoroutineScope, args: Bundle?): VideoMoveRepository {
+            return VideoMoveRepositoryImpl(context, coroutine, args)
         }
     }
 }
 
-private class VideoMoveRepositoryImpl(context: Context, args: Bundle?)
-    : BaseRepository<VideoMoveRepository.Callback>(context), VideoMoveRepository {
+private class VideoMoveRepositoryImpl(context: Context, coroutine: CoroutineScope, args: Bundle?)
+    : BaseRepository<VideoMoveRepository.Callback>(context, coroutine), VideoMoveRepository {
 
     override val targetDirs = object : LateinitProperty<Array<VideoDirectory>>() {
         override fun initialize(): Array<VideoDirectory> {
@@ -166,9 +170,9 @@ private class VideoMoveRepositoryImpl(context: Context, args: Bundle?)
 
     override fun moveVideosToCheckedDir() {
         mCallback?.onVideoMoveStart()
-        Executors.THREAD_POOL_EXECUTOR.execute {
+        AppScope.launch(Dispatchers.IO) {
             val moved = moveVideosToCheckedDirSync()
-            Executors.MAIN_EXECUTOR.execute {
+            withContext(Dispatchers.Main) {
                 mCallback?.onVideoMoveFinish(moved)
             }
         }
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/VideoRepository.java b/app/src/main/java/com/liuzhenlin/videos/model/VideoRepository.java
index 1256a47..b66253d 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/VideoRepository.java
+++ b/app/src/main/java/com/liuzhenlin/videos/model/VideoRepository.java
@@ -11,16 +11,20 @@ import android.os.Bundle;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
 
 import com.liuzhenlin.videos.bean.Video;
 
+import kotlinx.coroutines.CoroutineScope;
+
 public interface VideoRepository extends Repository<VideoRepository.Callback> {
 
     @NonNull
-    static VideoRepository create(@NonNull Context context) {
-        return new VideoRepositoryImpl(context);
+    static VideoRepository create(@NonNull Context context, @NonNull CoroutineScope coroutineScope) {
+        return new VideoRepositoryImpl(context, coroutineScope);
     }
 
+    @WorkerThread
     boolean initPlaylist(@Nullable Bundle savedInstanceState, @NonNull Intent intent);
 
     @Nullable Video[] getVideos();
diff --git a/app/src/main/java/com/liuzhenlin/videos/model/VideoRepositoryImpl.java b/app/src/main/java/com/liuzhenlin/videos/model/VideoRepositoryImpl.java
index 5fa057b..fa1fcc9 100644
--- a/app/src/main/java/com/liuzhenlin/videos/model/VideoRepositoryImpl.java
+++ b/app/src/main/java/com/liuzhenlin/videos/model/VideoRepositoryImpl.java
@@ -13,14 +13,19 @@ import android.os.Parcelable;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
 
 import com.liuzhenlin.common.utils.FileUtils;
+import com.liuzhenlin.common.utils.JCoroutine;
 import com.liuzhenlin.videos.Consts;
 import com.liuzhenlin.videos.bean.Video;
 import com.liuzhenlin.videos.dao.VideoListItemDao;
 
 import java.io.Serializable;
 
+import kotlinx.coroutines.CoroutineScope;
+import kotlinx.coroutines.Dispatchers;
+
 import static com.liuzhenlin.common.Consts.NO_ID;
 
 class VideoRepositoryImpl extends BaseRepository<VideoRepository.Callback>
@@ -31,104 +36,121 @@ class VideoRepositoryImpl extends BaseRepository<VideoRepository.Callback>
 
     private static final String KEY_VIDEO_INDEX = "kvi";
 
-    public VideoRepositoryImpl(@NonNull Context context) {
-        super(context);
+    public VideoRepositoryImpl(@NonNull Context context, @NonNull CoroutineScope coroutineScope) {
+        super(context, coroutineScope);
     }
 
+    @WorkerThread
     @Override
     public boolean initPlaylist(@Nullable Bundle savedInstanceState, @NonNull Intent intent) {
         final boolean stateRestore = savedInstanceState != null;
+        Video[] videos = null;
+        int videoIndex = -1;
         Video video;
+        boolean initSuceess = false;
 
         Parcelable[] parcelables = intent.getParcelableArrayExtra(Consts.KEY_VIDEOS);
         if (parcelables != null) {
             final int length = parcelables.length;
             if (length > 0) {
-                mVideos = new Video[length];
+                videos = new Video[length];
                 for (int i = 0; i < length; i++) {
                     video = (Video) parcelables[i];
                     if (stateRestore) {
-                        video.setProgress(
-                                VideoListItemDao.getSingleton(mContext).getVideoProgress(video.getId()));
+                        video.setProgress(getVideoProgressFromDB(video));
                     }
-                    mVideos[i] = video;
+                    videos[i] = video;
                 }
                 if (stateRestore) {
-                    mVideoIndex = savedInstanceState.getInt(KEY_VIDEO_INDEX);
+                    videoIndex = savedInstanceState.getInt(KEY_VIDEO_INDEX);
                 } else {
-                    mVideoIndex = intent.getIntExtra(Consts.KEY_SELECTION, 0);
-                    if (mVideoIndex < 0 || mVideoIndex >= length) {
-                        mVideoIndex = 0;
+                    videoIndex = intent.getIntExtra(Consts.KEY_SELECTION, 0);
+                    if (videoIndex < 0 || videoIndex >= length) {
+                        videoIndex = 0;
                     }
                 }
-                return true;
+                initSuceess = true;
             }
-            return false;
         }
 
-        video = intent.getParcelableExtra(Consts.KEY_VIDEO);
-        if (video != null) {
-            if (stateRestore) {
-                video.setProgress(
-                        VideoListItemDao.getSingleton(mContext).getVideoProgress(video.getId()));
+        if (!initSuceess) {
+            video = intent.getParcelableExtra(Consts.KEY_VIDEO);
+            if (video != null) {
+                if (stateRestore) {
+                    video.setProgress(getVideoProgressFromDB(video));
+                }
+                videos = new Video[]{video};
+                videoIndex = 0;
+                initSuceess = true;
             }
-            mVideos = new Video[]{video};
-            mVideoIndex = 0;
-            return true;
         }
 
-        Parcelable[] videoUriParcels = (Parcelable[])
-                intent.getSerializableExtra(Consts.KEY_VIDEO_URIS);
-        Serializable[] videoTitleSerials = (Serializable[])
-                intent.getSerializableExtra(Consts.KEY_VIDEO_TITLES);
-        if (videoUriParcels != null) {
-            final int length = videoUriParcels.length;
-            if (length > 0) {
-                mVideos = new Video[length];
-                for (int i = 0; i < length; i++) {
-                    video = buildVideoForUri((Uri) videoUriParcels[i],
-                            (String) (videoTitleSerials != null ? videoTitleSerials[i] : null));
-                    if (stateRestore && video.getId() != NO_ID) {
-                        video.setProgress(
-                                VideoListItemDao.getSingleton(mContext).getVideoProgress(video.getId()));
+        if (!initSuceess) {
+            Parcelable[] videoUriParcels = (Parcelable[])
+                    intent.getSerializableExtra(Consts.KEY_VIDEO_URIS);
+            Serializable[] videoTitleSerials = (Serializable[])
+                    intent.getSerializableExtra(Consts.KEY_VIDEO_TITLES);
+            if (videoUriParcels != null) {
+                final int length = videoUriParcels.length;
+                if (length > 0) {
+                    videos = new Video[length];
+                    for (int i = 0; i < length; i++) {
+                        video = buildVideoForUri((Uri) videoUriParcels[i],
+                                (String) (videoTitleSerials != null ? videoTitleSerials[i] : null));
+                        if (stateRestore && video.getId() != NO_ID) {
+                            video.setProgress(getVideoProgressFromDB(video));
+                        }
+                        videos[i] = video;
                     }
-                    mVideos[i] = video;
-                }
-                if (stateRestore) {
-                    mVideoIndex = savedInstanceState.getInt(KEY_VIDEO_INDEX);
-                } else {
-                    mVideoIndex = intent.getIntExtra(Consts.KEY_SELECTION, 0);
-                    if (mVideoIndex < 0 || mVideoIndex >= length) {
-                        mVideoIndex = 0;
+                    if (stateRestore) {
+                        videoIndex = savedInstanceState.getInt(KEY_VIDEO_INDEX);
+                    } else {
+                        videoIndex = intent.getIntExtra(Consts.KEY_SELECTION, 0);
+                        if (videoIndex < 0 || videoIndex >= length) {
+                            videoIndex = 0;
+                        }
                     }
+                    initSuceess = true;
                 }
-                return true;
             }
-            return false;
         }
 
-        Uri uri = intent.getData();
-        if (uri == null) {
-            uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+        if (!initSuceess) {
+            Uri uri = intent.getData();
             if (uri == null) {
-                CharSequence uriCharSequence = intent.getCharSequenceExtra(Intent.EXTRA_TEXT);
-                if (uriCharSequence != null) {
-                    uri = Uri.parse(uriCharSequence.toString());
+                uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+                if (uri == null) {
+                    CharSequence uriCharSequence = intent.getCharSequenceExtra(Intent.EXTRA_TEXT);
+                    if (uriCharSequence != null) {
+                        uri = Uri.parse(uriCharSequence.toString());
+                    }
                 }
             }
-        }
-        if (uri != null) {
-            video = buildVideoForUri(uri, intent.getStringExtra(Consts.KEY_VIDEO_TITLE));
-            if (stateRestore && video.getId() != NO_ID) {
-                video.setProgress(
-                        VideoListItemDao.getSingleton(mContext).getVideoProgress(video.getId()));
+            if (uri != null) {
+                video = buildVideoForUri(uri, intent.getStringExtra(Consts.KEY_VIDEO_TITLE));
+                if (stateRestore && video.getId() != NO_ID) {
+                    video.setProgress(getVideoProgressFromDB(video));
+                }
+                videos = new Video[]{video};
+                videoIndex = 0;
+                initSuceess = true;
             }
-            mVideos = new Video[]{video};
-            mVideoIndex = 0;
-            return true;
         }
 
-        return false;
+        if (initSuceess) {
+            final Video[] vs = videos;
+            final int vi = videoIndex;
+            JCoroutine.runBlocking(Dispatchers.getMain().getImmediate(), () -> {
+                mVideos = vs;
+                mVideoIndex = vi;
+                return null;
+            });
+        }
+        return initSuceess;
+    }
+
+    private int getVideoProgressFromDB(Video video) {
+        return VideoListItemDao.getSingleton(mContext).getVideoProgress(video.getId());
     }
 
     private Video buildVideoForUri(Uri uri, String videoTitle) {
@@ -222,7 +244,8 @@ class VideoRepositoryImpl extends BaseRepository<VideoRepository.Callback>
         if (updateDB) {
             final long id = video.getId();
             if (id != NO_ID) {
-                VideoListItemDao.getSingleton(mContext).setVideoProgress(id, progress);
+                JCoroutine.launch(mCoroutineScope, Dispatchers.getIO(),
+                        () -> VideoListItemDao.getSingleton(mContext).setVideoProgress(id, progress));
             }
         }
     }
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/FeedbackPresenter.java b/app/src/main/java/com/liuzhenlin/videos/presenter/FeedbackPresenter.java
index a1b3107..2ec65ab 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/FeedbackPresenter.java
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/FeedbackPresenter.java
@@ -16,6 +16,7 @@ import android.widget.Toast;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
+import com.liuzhenlin.common.utils.Coroutines;
 import com.liuzhenlin.common.utils.NetworkUtil;
 import com.liuzhenlin.common.utils.Synthetic;
 import com.liuzhenlin.videos.R;
@@ -43,16 +44,21 @@ class FeedbackPresenter extends Presenter<IFeedbackView> implements IFeedbackPre
     @Override
     public void attachToView(@NonNull IFeedbackView view) {
         super.attachToView(view);
-        mFeedbackRepository = FeedbackRepository.create(mContext, this, MAX_COUNT_UPLOAD_PICTURES);
-        mFeedbackRepository.setCallback(this);
+        if (mFeedbackRepository == null) {
+            mFeedbackRepository = FeedbackRepository.create(mContext, Coroutines.getModelScope(this),
+                    this, MAX_COUNT_UPLOAD_PICTURES);
+            mFeedbackRepository.setCallback(this);
+        }
     }
 
     @Override
-    public void detachFromView(@NonNull IFeedbackView view) {
-        mFeedbackRepository.clearPictures(true);
-        mFeedbackRepository.setCallback(null);
-        mFeedbackRepository = null;
-        super.detachFromView(view);
+    protected void onCleared() {
+        super.onCleared();
+        if (mFeedbackRepository != null) {
+            mFeedbackRepository.clearPictures(true);
+            mFeedbackRepository.setCallback(null);
+            mFeedbackRepository = null;
+        }
     }
 
     @Override
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/IFeedbackPresenter.java b/app/src/main/java/com/liuzhenlin/videos/presenter/IFeedbackPresenter.java
index 529b11f..eb181f5 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/IFeedbackPresenter.java
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/IFeedbackPresenter.java
@@ -20,8 +20,9 @@ import com.liuzhenlin.videos.view.activity.IFeedbackView;
 public interface IFeedbackPresenter extends IPresenter<IFeedbackView> {
 
     @NonNull
-    static IFeedbackPresenter newInstance() {
-        return new FeedbackPresenter();
+    static <T extends Presenter<IFeedbackView> & IFeedbackPresenter> Class<T> getImplClass() {
+        //noinspection unchecked
+        return (Class<T>) FeedbackPresenter.class;
     }
 
     void restoreInstanceState(@Nullable Bundle savedInstanceState);
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/IVideoPresenter.java b/app/src/main/java/com/liuzhenlin/videos/presenter/IVideoPresenter.java
index 16145c0..b791260 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/IVideoPresenter.java
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/IVideoPresenter.java
@@ -53,7 +53,8 @@ public interface IVideoPresenter extends IPresenter<IVideoView> {
     TextureVideoView.PlayListAdapter<? extends IVideoView.PlaylistViewHolder> newPlaylistAdapter();
 
     @NonNull
-    static IVideoPresenter newInstance() {
-        return new VideoPresenter();
+    static <T extends Presenter<IVideoView> & IVideoPresenter> Class<T> getImplClass() {
+        //noinspection unchecked
+        return (Class<T>) VideoPresenter.class;
     }
 }
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/LocalSearchedVideosPresenter.kt b/app/src/main/java/com/liuzhenlin/videos/presenter/LocalSearchedVideosPresenter.kt
index 2f9460a..2e29571 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/LocalSearchedVideosPresenter.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/LocalSearchedVideosPresenter.kt
@@ -10,6 +10,7 @@ import android.content.Intent
 import android.view.ViewGroup
 import com.liuzhenlin.common.adapter.HeaderAndFooterWrapper
 import com.liuzhenlin.common.adapter.ImageLoadingListAdapter
+import com.liuzhenlin.common.utils.modelScope
 import com.liuzhenlin.videos.*
 import com.liuzhenlin.videos.bean.Video
 import com.liuzhenlin.videos.model.ILocalSearchedVideoListModel
@@ -41,8 +42,10 @@ interface ILocalSearchedVideosPresenter : IPresenter<ILocalSearchedVideosView>,
 
     companion object {
         @JvmStatic
-        fun newInstance(): ILocalSearchedVideosPresenter {
-            return LocalSearchedVideosPresenter()
+        fun <T> getImplClass(): Class<T> where T : Presenter<ILocalSearchedVideosView>,
+                                               T : ILocalSearchedVideosPresenter {
+            @Suppress("UNCHECKED_CAST")
+            return LocalSearchedVideosPresenter::class.java as Class<T>
         }
     }
 }
@@ -61,7 +64,7 @@ class LocalSearchedVideosPresenter : Presenter<ILocalSearchedVideosView>(),
         super.attachToView(view)
         var model = mModel
         if (model == null) {
-            model = LocalSearchedVideoListModel(mContext)
+            model = LocalSearchedVideoListModel(mContext, modelScope)
             model.addOnLoadListener(object : OnLoadListener<Nothing, MutableList<Video>?> {
                 override fun onLoadStart() = onVideoItemsLoadStart()
 
@@ -76,10 +79,10 @@ class LocalSearchedVideosPresenter : Presenter<ILocalSearchedVideosView>(),
         model.setVideos(view.getArguments()?.getParcelableArrayList(KEY_VIDEOS) ?: model.videos)
     }
 
-    override fun detachFromView(view: ILocalSearchedVideosView) {
-        super.detachFromView(view)
+    override fun onCleared() {
+        super.onCleared()
         val videos = mModel?.videos ?: arrayListOf()
-        view.onReturnResult(RESULT_CODE_LOCAL_SEARCHED_VIDEOS_FRAGMENT,
+        mView?.onReturnResult(RESULT_CODE_LOCAL_SEARCHED_VIDEOS_FRAGMENT,
                 Intent().putParcelableArrayListExtra(
                         KEY_VIDEOS, videos as? ArrayList<Video> ?: ArrayList(videos)))
         mModel?.setCallback(null)
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/LocalVideoListPresenter.kt b/app/src/main/java/com/liuzhenlin/videos/presenter/LocalVideoListPresenter.kt
index cffa775..ae87a7e 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/LocalVideoListPresenter.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/LocalVideoListPresenter.kt
@@ -12,6 +12,7 @@ import android.view.ViewGroup
 import androidx.fragment.app.Fragment
 import com.liuzhenlin.common.adapter.HeaderAndFooterWrapper
 import com.liuzhenlin.common.adapter.ImageLoadingListAdapter
+import com.liuzhenlin.common.utils.modelScope
 import com.liuzhenlin.videos.*
 import com.liuzhenlin.videos.bean.Video
 import com.liuzhenlin.videos.bean.VideoDirectory
@@ -81,8 +82,10 @@ interface ILocalVideoListPresenter : IPresenter<ILocalVideoListView>,
 
     companion object {
         @JvmStatic
-        fun newInstance(): ILocalVideoListPresenter {
-            return LocalVideoListPresenter()
+        fun <T> getImplClass(): Class<T> where T : Presenter<ILocalVideoListView>,
+                                               T : ILocalVideoListPresenter {
+            @Suppress("UNCHECKED_CAST")
+            return LocalVideoListPresenter::class.java as Class<T>
         }
     }
 }
@@ -101,7 +104,7 @@ class LocalVideoListPresenter : Presenter<ILocalVideoListView>(), ILocalVideoLis
     private val mModel: LocalVideoListModel
         get() {
             if (_mModel == null) {
-                _mModel = LocalVideoListModel(App.getInstanceUnsafe()!!)
+                _mModel = LocalVideoListModel(App.getInstanceUnsafe()!!, null, modelScope)
             }
             return _mModel!!
         }
@@ -119,7 +122,8 @@ class LocalVideoListPresenter : Presenter<ILocalVideoListView>(), ILocalVideoLis
     override fun attachToView(view: ILocalVideoListView) {
         super.attachToView(view)
         if (view.getArguments()?.containsKey(KEY_VIDEODIR) == true) {
-            _mModel = LocalVideoListModel(mContext, view.getArguments()?.getParcelable(KEY_VIDEODIR))
+            _mModel = LocalVideoListModel(mContext, view.getArguments()?.getParcelable(KEY_VIDEODIR),
+                    modelScope)
         }
         mModel.setCallback(this)
         mModel.addOnLoadListener(object : OnLoadListener<Nothing, MutableList<VideoListItem>?> {
@@ -144,11 +148,6 @@ class LocalVideoListPresenter : Presenter<ILocalVideoListView>(), ILocalVideoLis
 
     override fun detachFromView(view: ILocalVideoListView) {
         super.detachFromView(view)
-        if (mSublist) {
-            view.onReturnResult(
-                    RESULT_CODE_LOCAL_VIDEO_SUBLIST_FRAGMENT,
-                    Intent().putExtra(KEY_VIDEODIR, mModel.parentVideoDir))
-        }
         mModel.setCallback(null)
         mVideosLoadListener?.let {
             mModel.removeOnLoadListener(it)
@@ -156,6 +155,15 @@ class LocalVideoListPresenter : Presenter<ILocalVideoListView>(), ILocalVideoLis
         }
     }
 
+    override fun onCleared() {
+        super.onCleared()
+        if (mSublist) {
+            mView?.onReturnResult(
+                    RESULT_CODE_LOCAL_VIDEO_SUBLIST_FRAGMENT,
+                    Intent().putExtra(KEY_VIDEODIR, mModel.parentVideoDir))
+        }
+    }
+
     override fun onViewCreated(view: ILocalVideoListView) {
         super.onViewCreated(view)
         view.init(mSublist, mModel.parentVideoDir?.name, mModel.parentVideoDir?.path,
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/Presenter.java b/app/src/main/java/com/liuzhenlin/videos/presenter/Presenter.java
index a91ca20..8a73ea3 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/Presenter.java
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/Presenter.java
@@ -10,14 +10,23 @@ import android.content.Context;
 
 import androidx.annotation.NonNull;
 import androidx.core.util.ObjectsCompat;
+import androidx.lifecycle.ViewModel;
+import androidx.lifecycle.ViewModelProvider;
+import androidx.lifecycle.ViewModelStoreOwner;
 
+import com.liuzhenlin.common.utils.Coroutines;
+import com.liuzhenlin.common.utils.ReflectionUtils;
 import com.liuzhenlin.videos.view.IView;
 
+import kotlinx.coroutines.CoroutineScope;
+
 /**
  * @author 刘振林
  */
 @SuppressWarnings("rawtypes")
-public class Presenter<V extends IView> implements IPresenter<V> {
+public class Presenter<V extends IView> extends ViewModel implements IPresenter<V> {
+
+    protected final CoroutineScope mCoroutineScope = Coroutines.getViewModelScope(this);
 
     protected V mView;
     protected Context mThemedContext;
@@ -72,4 +81,31 @@ public class Presenter<V extends IView> implements IPresenter<V> {
     @Override
     public void onViewDestroyed(@NonNull V view) {
     }
+
+    public static class Provider {
+
+        private static final ViewModelProvider.Factory sViewModelFactory =
+                new ViewModelProvider.Factory() {
+                    @NonNull
+                    @Override
+                    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
+                        try {
+                            return ReflectionUtils.getDeclaredConstructor(modelClass).newInstance();
+                        } catch (Exception e) {
+                            throw new RuntimeException("Cannot create an instance of" + modelClass, e);
+                        }
+                    }
+                };
+
+        private final ViewModelProvider mViewModelProvider;
+
+        public Provider(@NonNull ViewModelStoreOwner owner) {
+            mViewModelProvider = new ViewModelProvider(owner, sViewModelFactory);
+        }
+
+        @NonNull
+        public <P extends Presenter<V>, V extends IView> P get(@NonNull Class<P> presenterClass) {
+            return mViewModelProvider.get(presenterClass);
+        }
+    }
 }
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/VideoMovePresenter.kt b/app/src/main/java/com/liuzhenlin/videos/presenter/VideoMovePresenter.kt
index 96490cc..bf493eb 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/VideoMovePresenter.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/VideoMovePresenter.kt
@@ -8,6 +8,7 @@ package com.liuzhenlin.videos.presenter
 import android.os.Bundle
 import android.view.ViewGroup
 import com.liuzhenlin.common.adapter.ImageLoadingListAdapter
+import com.liuzhenlin.common.utils.modelScope
 import com.liuzhenlin.videos.firstVideoOrNull
 import com.liuzhenlin.videos.model.VideoMoveRepository
 import com.liuzhenlin.videos.view.fragment.IVideoMoveView
@@ -25,8 +26,9 @@ interface IVideoMovePresenter : IPresenter<IVideoMoveView> {
 
     companion object {
         @JvmStatic
-        fun newInstance(): IVideoMovePresenter {
-            return VideoMovePresenter()
+        fun <T> getImplClass(): Class<T> where T : Presenter<IVideoMoveView>, T : IVideoMovePresenter {
+            @Suppress("UNCHECKED_CAST")
+            return VideoMovePresenter::class.java as Class<T>
         }
     }
 }
@@ -38,7 +40,7 @@ class VideoMovePresenter : Presenter<IVideoMoveView>(), IVideoMovePresenter,
 
     override fun attachToView(view: IVideoMoveView) {
         super.attachToView(view)
-        mVideoMoveRepository = VideoMoveRepository.create(mContext, view.getArguments())
+        mVideoMoveRepository = VideoMoveRepository.create(mContext, modelScope, view.getArguments())
         mVideoMoveRepository!!.setCallback(this)
     }
 
diff --git a/app/src/main/java/com/liuzhenlin/videos/presenter/VideoPresenter.java b/app/src/main/java/com/liuzhenlin/videos/presenter/VideoPresenter.java
index fafb1e9..0a15024 100644
--- a/app/src/main/java/com/liuzhenlin/videos/presenter/VideoPresenter.java
+++ b/app/src/main/java/com/liuzhenlin/videos/presenter/VideoPresenter.java
@@ -13,6 +13,8 @@ import android.view.ViewGroup;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
+import com.liuzhenlin.common.utils.Coroutines;
+import com.liuzhenlin.common.utils.JCoroutine;
 import com.liuzhenlin.common.utils.ShareUtils;
 import com.liuzhenlin.common.utils.Synthetic;
 import com.liuzhenlin.texturevideoview.TextureVideoView;
@@ -27,6 +29,8 @@ import com.liuzhenlin.videos.view.fragment.VideoListItemOpsKt;
 import java.io.File;
 import java.util.List;
 
+import kotlinx.coroutines.Dispatchers;
+
 /**
  * @author 刘振林
  */
@@ -38,15 +42,19 @@ class VideoPresenter extends Presenter<IVideoView> implements IVideoPresenter,
     @Override
     public void attachToView(@NonNull IVideoView view) {
         super.attachToView(view);
-        mVideoRepository = VideoRepository.create(mContext);
-        mVideoRepository.setCallback(this);
+        if (mVideoRepository == null) {
+            mVideoRepository = VideoRepository.create(mContext, Coroutines.getModelScope(this));
+            mVideoRepository.setCallback(this);
+        }
     }
 
     @Override
-    public void detachFromView(@NonNull IVideoView view) {
-        super.detachFromView(view);
-        mVideoRepository.setCallback(null);
-        mVideoRepository = null;
+    protected void onCleared() {
+        super.onCleared();
+        if (mVideoRepository != null) {
+            mVideoRepository.setCallback(null);
+            mVideoRepository = null;
+        }
     }
 
     @Override
@@ -82,13 +90,18 @@ class VideoPresenter extends Presenter<IVideoView> implements IVideoPresenter,
         if (repository == null) {
             return;
         }
-        if (repository.initPlaylist(savedInstanceState, intent)) {
-            if (callback != null)
-                callback.onInitialized(repository.getVideos(), repository.getVideoIndex());
-        } else {
-            if (callback != null)
-                callback.onInitializationFail();
-        }
+        JCoroutine.launch(mCoroutineScope, Dispatchers.getIO(), () -> {
+            boolean initialized = repository.initPlaylist(savedInstanceState, intent);
+            JCoroutine.launch(mCoroutineScope, Dispatchers.getMain(), () -> {
+                if (initialized) {
+                    if (callback != null)
+                        callback.onInitialized(repository.getVideos(), repository.getVideoIndex());
+                } else {
+                    if (callback != null)
+                        callback.onInitializationFail();
+                }
+            });
+        });
     }
 
     @Override
diff --git a/app/src/main/java/com/liuzhenlin/videos/view/activity/FeedbackActivity.java b/app/src/main/java/com/liuzhenlin/videos/view/activity/FeedbackActivity.java
index 1138bb5..cba954b 100644
--- a/app/src/main/java/com/liuzhenlin/videos/view/activity/FeedbackActivity.java
+++ b/app/src/main/java/com/liuzhenlin/videos/view/activity/FeedbackActivity.java
@@ -59,6 +59,7 @@ import com.liuzhenlin.videos.Consts;
 import com.liuzhenlin.videos.R;
 import com.liuzhenlin.videos.dao.AppPrefs;
 import com.liuzhenlin.videos.presenter.IFeedbackPresenter;
+import com.liuzhenlin.videos.presenter.Presenter;
 import com.liuzhenlin.videos.view.adapter.GalleryPagerAdapter;
 
 import java.util.ArrayList;
@@ -85,7 +86,7 @@ public class FeedbackActivity extends BaseActivity implements IFeedbackView, Vie
 
     @Synthetic boolean mShouldSaveDataOnDestroy;
 
-    @Synthetic final IFeedbackPresenter mPresenter = IFeedbackPresenter.newInstance();
+    @Synthetic IFeedbackPresenter mPresenter;
 
     @Nullable
     @Override
@@ -196,6 +197,7 @@ public class FeedbackActivity extends BaseActivity implements IFeedbackView, Vie
             return false;
         });
 
+        mPresenter = new Presenter.Provider(this).get(IFeedbackPresenter.getImplClass());
         mPresenter.attachToView(this);
 
         BaseAdapter adapter = mPresenter.getPictureGridAdapter();
diff --git a/app/src/main/java/com/liuzhenlin/videos/view/activity/MainActivity.java b/app/src/main/java/com/liuzhenlin/videos/view/activity/MainActivity.java
index 9aa2e3b..ecd25c1 100644
--- a/app/src/main/java/com/liuzhenlin/videos/view/activity/MainActivity.java
+++ b/app/src/main/java/com/liuzhenlin/videos/view/activity/MainActivity.java
@@ -58,10 +58,11 @@ import com.liuzhenlin.common.compat.ViewCompatibility;
 import com.liuzhenlin.common.listener.OnBackPressedListener;
 import com.liuzhenlin.common.utils.BitmapUtils;
 import com.liuzhenlin.common.utils.ColorUtils;
+import com.liuzhenlin.common.utils.Coroutines;
 import com.liuzhenlin.common.utils.DensityUtils;
-import com.liuzhenlin.common.utils.Executors;
 import com.liuzhenlin.common.utils.FileUtils;
 import com.liuzhenlin.common.utils.IOUtils;
+import com.liuzhenlin.common.utils.JCoroutine;
 import com.liuzhenlin.common.utils.TextViewUtils;
 import com.liuzhenlin.common.utils.ThemeUtils;
 import com.liuzhenlin.common.utils.TransitionUtils;
@@ -87,6 +88,9 @@ import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.LinkedHashMap;
 
+import kotlinx.coroutines.CoroutineScope;
+import kotlinx.coroutines.Dispatchers;
+
 import static com.liuzhenlin.common.Consts.EMPTY_STRING;
 import static com.liuzhenlin.videos.Consts.TEXT_COLOR_PRIMARY_DARK;
 import static com.liuzhenlin.videos.Consts.TEXT_COLOR_PRIMARY_LIGHT;
@@ -370,7 +374,7 @@ public class MainActivity extends StatusBarTransparentActivity implements View.O
     }
 
     @Synthetic void setDrawerBackground(String path) {
-        Executors.SERIAL_EXECUTOR.execute(new LoadDrawerImageTask(this, path));
+        new LoadDrawerImageTask(this, path).execute();
     }
 
     private static final class LoadDrawerImageTask implements Runnable {
@@ -382,10 +386,30 @@ public class MainActivity extends StatusBarTransparentActivity implements View.O
             mImagePath = imagePath;
         }
 
+        void execute() {
+            CoroutineScope coroutineScope = getCoroutineScope();
+            if (coroutineScope != null) {
+                JCoroutine.launch(coroutineScope, JCoroutine.SingleDispatcher, this);
+            }
+        }
+
+        CoroutineScope getCoroutineScope() {
+            MainActivity activity = getActivity();
+            return activity == null ? null : Coroutines.getLifecycleScope(activity);
+        }
+
+        MainActivity getActivity() {
+            MainActivity activity = mActivityRef.get();
+            if (activity == null || activity.isFinishing()) {
+                return null;
+            }
+            return activity;
+        }
+
         @Override
         public void run() {
-            final MainActivity activity = mActivityRef.get();
-            if (activity == null || activity.isFinishing()) {
+            final MainActivity activity = getActivity();
+            if (activity == null) {
                 return;
             }
 
@@ -405,12 +429,15 @@ public class MainActivity extends StatusBarTransparentActivity implements View.O
         }
 
         void setDrawerBackground(Bitmap bmp) {
-            Executors.MAIN_EXECUTOR.post(() -> {
-                final MainActivity activity = mActivityRef.get();
-                if (activity != null && !activity.isFinishing()) {
-                    activity.setDrawerBackground(bmp, mImagePath);
-                }
-            });
+            final CoroutineScope coroutineScope = getCoroutineScope();
+            if (coroutineScope != null) {
+                JCoroutine.launch(coroutineScope, Dispatchers.getMain(), () -> {
+                    final MainActivity activity = getActivity();
+                    if (activity != null) {
+                        activity.setDrawerBackground(bmp, mImagePath);
+                    }
+                });
+            }
         }
     }
 
diff --git a/app/src/main/java/com/liuzhenlin/videos/view/activity/VideoActivity.java b/app/src/main/java/com/liuzhenlin/videos/view/activity/VideoActivity.java
index 5c3ce05..7abaf7e 100644
--- a/app/src/main/java/com/liuzhenlin/videos/view/activity/VideoActivity.java
+++ b/app/src/main/java/com/liuzhenlin/videos/view/activity/VideoActivity.java
@@ -64,6 +64,7 @@ import com.liuzhenlin.videos.R;
 import com.liuzhenlin.videos.bean.Video;
 import com.liuzhenlin.videos.dao.AppPrefs;
 import com.liuzhenlin.videos.presenter.IVideoPresenter;
+import com.liuzhenlin.videos.presenter.Presenter;
 import com.liuzhenlin.videos.utils.VideoUtils2;
 import com.liuzhenlin.videos.web.youtube.WebService;
 
@@ -98,7 +99,7 @@ public class VideoActivity extends BaseActivity implements IVideoView,
     private ImageView mLockUnlockOrientationButton;
 
     @Synthetic IVideoPlayer mVideoPlayer;
-    @Synthetic final IVideoPresenter mPresenter = IVideoPresenter.newInstance();
+    @Synthetic IVideoPresenter mPresenter;
 
     @Synthetic int mVideoWidth;
     @Synthetic int mVideoHeight;
@@ -257,19 +258,20 @@ public class VideoActivity extends BaseActivity implements IVideoView,
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        setRequestedOrientation(mScreenOrientation);
+        setContentView(R.layout.activity_video);
+        initViews();
+        mPrivateFlags |= PFLAG_VIEW_CREATED;
+        mPresenter = new Presenter.Provider(this).get(IVideoPresenter.getImplClass());
         mPresenter.attachToView(this);
+        mPresenter.onViewCreated(this);
         mPresenter.initPlaylist(savedInstanceState, getIntent(),
                 new IVideoPresenter.PlaylistInitializationCallback() {
                     final VideoActivity _this = VideoActivity.this;
 
                     @Override
                     public void onInitialized(@NonNull Video[] playlist, int playlistIndex) {
-                        setRequestedOrientation(mScreenOrientation);
-                        setContentView(R.layout.activity_video);
-                        initViews(savedInstanceState, playlist, playlistIndex);
-                        mPresenter.onViewCreated(_this);
-                        mPrivateFlags |= PFLAG_VIEW_CREATED;
-                        mPresenter.playCurrentVideo();
+                        onPlaylistInitialized(playlist, playlistIndex);
                     }
 
                     @Override
@@ -286,6 +288,28 @@ public class VideoActivity extends BaseActivity implements IVideoView,
                 });
     }
 
+    @Synthetic void onPlaylistInitialized(Video[] playlist, int playlistIndex) {
+        final boolean needPlaylist = playlist.length > 1;
+        //noinspection rawtypes
+        TextureVideoView.PlayListAdapter adapter = mVideoView.getPlayListAdapter();
+        if (needPlaylist) {
+            if (adapter != null) {
+                //noinspection NotifyDataSetChanged
+                adapter.notifyDataSetChanged();
+            } else {
+                mVideoView.setPlayListAdapter(mPresenter.newPlaylistAdapter());
+            }
+            // Ensures the list scrolls to the position of the video to be played
+            ensureSelectedItemVisibleInPlaylist(playlistIndex);
+        } else {
+            mVideoView.setPlayListAdapter(null);
+        }
+        mVideoView.setCanSkipToPrevious(needPlaylist);
+        mVideoView.setCanSkipToNext(needPlaylist);
+
+        mPresenter.playCurrentVideo();
+    }
+
     @SuppressLint("MissingSuperCall")
     @Override
     protected void onNewIntent(Intent intent) {
@@ -296,22 +320,7 @@ public class VideoActivity extends BaseActivity implements IVideoView,
                         VideoActivity.super.onNewIntent(intent);
                         setIntent(intent);
 
-                        final boolean needPlaylist = playlist.length > 1;
-                        //noinspection rawtypes
-                        TextureVideoView.PlayListAdapter adapter = mVideoView.getPlayListAdapter();
-                        if (needPlaylist && adapter != null) {
-                            //noinspection NotifyDataSetChanged
-                            adapter.notifyDataSetChanged();
-                        }
-                        //noinspection unchecked
-                        mVideoView.setPlayListAdapter(
-                                needPlaylist
-                                        ? adapter == null ? mPresenter.newPlaylistAdapter() : adapter
-                                        : null);
-                        mVideoView.setCanSkipToPrevious(needPlaylist);
-                        mVideoView.setCanSkipToNext(needPlaylist);
-
-                        mPresenter.playCurrentVideo();
+                        onPlaylistInitialized(playlist, playlistIndex);
                     }
 
                     @Override
@@ -328,7 +337,7 @@ public class VideoActivity extends BaseActivity implements IVideoView,
         }
     }
 
-    @Synthetic void initViews(Bundle savedInstanceState, Video[] playlist, int playlistIndex) {
+    private void initViews() {
         mStatusHeight = SystemBarUtils.getStatusHeight(this);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
             mStatusBarView = findViewById(R.id.view_statusBar);
@@ -364,15 +373,6 @@ public class VideoActivity extends BaseActivity implements IVideoView,
         mLockUnlockOrientationButton.setOnClickListener(v ->
                 setScreenOrientationLocked((mPrivateFlags & PFLAG_SCREEN_ORIENTATION_LOCKED) == 0));
 
-        if (playlist.length > 1) {
-            mVideoView.setPlayListAdapter(mPresenter.newPlaylistAdapter());
-            mVideoView.setCanSkipToPrevious(true);
-            mVideoView.setCanSkipToNext(true);
-        }
-        // Ensures the list scrolls to the position of the video to be played
-        if (savedInstanceState == null && playlistIndex != 0) {
-            notifyPlaylistSelectionChanged(0, playlistIndex, true);
-        }
         videoPlayer.addVideoListener(new IVideoPlayer.VideoListener() {
             @Override
             public void onVideoStarted() {
@@ -1122,9 +1122,8 @@ public class VideoActivity extends BaseActivity implements IVideoView,
     @Override
     public void notifyPlaylistSelectionChanged(
             int oldPosition, int position, boolean checkNewItemVisibility) {
-        RecyclerView playlist = mVideoView.findViewById(R.id.rv_playlist);
         //noinspection rawtypes
-        RecyclerView.Adapter adapter = playlist.getAdapter();
+        RecyclerView.Adapter adapter = mVideoView.getPlayListAdapter();
         //noinspection ConstantConditions
         adapter.notifyItemChanged(oldPosition,
                 PLAYLIST_ADAPTER_PAYLOAD_VIDEO_PROGRESS_CHANGED
@@ -1133,32 +1132,37 @@ public class VideoActivity extends BaseActivity implements IVideoView,
                 PLAYLIST_ADAPTER_PAYLOAD_VIDEO_PROGRESS_CHANGED
                         | PLAYLIST_ADAPTER_PAYLOAD_HIGHLIGHT_ITEM_IF_SELECTED);
         if (checkNewItemVisibility) {
-            RecyclerView.LayoutManager lm = playlist.getLayoutManager();
-            if (lm instanceof LinearLayoutManager) {
-                LinearLayoutManager llm = (LinearLayoutManager) lm;
-                if (llm.findFirstCompletelyVisibleItemPosition() > position
-                        || llm.findLastCompletelyVisibleItemPosition() < position) {
-                    llm.scrollToPosition(position);
-                }
-            } else if (lm instanceof StaggeredGridLayoutManager) {
-                StaggeredGridLayoutManager sglm = (StaggeredGridLayoutManager) lm;
+            ensureSelectedItemVisibleInPlaylist(position);
+        }
+    }
 
-                int minFirstCompletelyVisiblePosition = 0;
-                for (int i : sglm.findFirstCompletelyVisibleItemPositions(null)) {
-                    minFirstCompletelyVisiblePosition = Math.min(minFirstCompletelyVisiblePosition, i);
-                }
-                if (minFirstCompletelyVisiblePosition > position) {
-                    sglm.scrollToPosition(position);
-                    return;
-                }
+    private void ensureSelectedItemVisibleInPlaylist(int selection) {
+        RecyclerView playlist = mVideoView.findViewById(R.id.rv_playlist);
+        RecyclerView.LayoutManager lm = playlist.getLayoutManager();
+        if (lm instanceof LinearLayoutManager) {
+            LinearLayoutManager llm = (LinearLayoutManager) lm;
+            if (llm.findFirstCompletelyVisibleItemPosition() > selection
+                    || llm.findLastCompletelyVisibleItemPosition() < selection) {
+                llm.scrollToPosition(selection);
+            }
+        } else if (lm instanceof StaggeredGridLayoutManager) {
+            StaggeredGridLayoutManager sglm = (StaggeredGridLayoutManager) lm;
 
-                int maxLastCompletelyVisiblePosition = 0;
-                for (int i : sglm.findLastCompletelyVisibleItemPositions(null)) {
-                    maxLastCompletelyVisiblePosition = Math.max(maxLastCompletelyVisiblePosition, i);
-                }
-                if (maxLastCompletelyVisiblePosition < position) {
-                    sglm.scrollToPosition(position);
-                }
+            int minFirstCompletelyVisiblePosition = 0;
+            for (int i : sglm.findFirstCompletelyVisibleItemPositions(null)) {
+                minFirstCompletelyVisiblePosition = Math.min(minFirstCompletelyVisiblePosition, i);
+            }
+            if (minFirstCompletelyVisiblePosition > selection) {
+                sglm.scrollToPosition(selection);
+                return;
+            }
+
+            int maxLastCompletelyVisiblePosition = 0;
+            for (int i : sglm.findLastCompletelyVisibleItemPositions(null)) {
+                maxLastCompletelyVisiblePosition = Math.max(maxLastCompletelyVisiblePosition, i);
+            }
+            if (maxLastCompletelyVisiblePosition < selection) {
+                sglm.scrollToPosition(selection);
             }
         }
     }
diff --git a/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalSearchedVideosFragment.kt b/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalSearchedVideosFragment.kt
index 2c55026..af6e3b5 100644
--- a/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalSearchedVideosFragment.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalSearchedVideosFragment.kt
@@ -45,6 +45,7 @@ import com.liuzhenlin.floatingmenu.FloatingMenu
 import com.liuzhenlin.videos.*
 import com.liuzhenlin.videos.bean.Video
 import com.liuzhenlin.videos.presenter.ILocalSearchedVideosPresenter
+import com.liuzhenlin.videos.presenter.Presenter
 import com.liuzhenlin.videos.utils.VideoUtils2
 import com.liuzhenlin.videos.view.IView
 import com.liuzhenlin.videos.view.fragment.Payloads.*
@@ -95,7 +96,8 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
     private lateinit var mAdapterWrapper: SearchedVideoListAdapterWrapper
     private var mSelectedItemIndex = NO_POSITION
 
-    internal val presenter = ILocalSearchedVideosPresenter.newInstance()
+    internal var presenter: ILocalSearchedVideosPresenter? = null
+        private set
 
     private var mVideoOptionsMenu: FloatingMenu? = null
     private var mDownX = 0
@@ -109,16 +111,16 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
     init {
         lifecycle.addObserver(object : DefaultLifecycleObserver {
             override fun onStart(owner: LifecycleOwner) =
-                    presenter.onViewStart(this@LocalSearchedVideosFragment)
+                    presenter?.onViewStart(this@LocalSearchedVideosFragment) ?: Unit
 
             override fun onResume(owner: LifecycleOwner) =
-                    presenter.onViewResume(this@LocalSearchedVideosFragment)
+                    presenter?.onViewResume(this@LocalSearchedVideosFragment) ?: Unit
 
             override fun onPause(owner: LifecycleOwner) =
-                    presenter.onViewPaused(this@LocalSearchedVideosFragment)
+                    presenter?.onViewPaused(this@LocalSearchedVideosFragment) ?: Unit
 
             override fun onStop(owner: LifecycleOwner) =
-                    presenter.onViewStopped(this@LocalSearchedVideosFragment)
+                    presenter?.onViewStopped(this@LocalSearchedVideosFragment) ?: Unit
         })
     }
 
@@ -130,6 +132,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
         super.onAttach(context)
 
         val parent = parentFragment
+        presenter = Presenter.Provider(this).get(ILocalSearchedVideosPresenter.getImplClass())
 
         mInteractionCallback = when {
             parent is InteractionCallback -> parent
@@ -147,7 +150,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
         }
         mLifecycleCallback?.onFragmentAttached(this)
 
-        presenter.attachToView(this)
+        presenter?.attachToView(this)
     }
 
     override fun onScreenWidthDpLevelChanged(
@@ -185,7 +188,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
 
                 override fun onQueryTextChange(newText: String): Boolean {
                     mSearchText = newText.trim()
-                    presenter.refreshList(mSearchText)
+                    presenter?.refreshList(mSearchText)
                     return true
                 }
             })
@@ -268,7 +271,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
                     SORT_MODE_RELEVANCY_DESC -> SORT_MODE_RELEVANCY_ASC
                     else -> SORT_MODE_RELEVANCY_DESC
                 }
-                presenter.sortList(sortMode)
+                presenter?.sortList(sortMode)
             }
             R.id.btn_sortByName -> {
                 val sortMode = when (mSortByNameBtn.tag) {
@@ -276,7 +279,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
                     SORT_MODE_NAME_DESC -> SORT_MODE_NAME_ASC
                     else -> SORT_MODE_NAME_ASC
                 }
-                presenter.sortList(sortMode)
+                presenter?.sortList(sortMode)
             }
             R.id.btn_sortByDate -> {
                 val sortMode = when (mSortByDateBtn.tag) {
@@ -284,7 +287,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
                     SORT_MODE_DATE_DESC -> SORT_MODE_DATE_ASC
                     else -> SORT_MODE_DATE_ASC
                 }
-                presenter.sortList(sortMode)
+                presenter?.sortList(sortMode)
             }
             R.id.btn_sortBySize -> {
                 val sortMode = when (mSortBySizeBtn.tag) {
@@ -292,19 +295,19 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
                     SORT_MODE_SIZE_DESC -> SORT_MODE_SIZE_ASC
                     else -> SORT_MODE_SIZE_ASC
                 }
-                presenter.sortList(sortMode)
+                presenter?.sortList(sortMode)
             }
         }
 
         if (v.parent === mRecyclerView) {
-            presenter.playVideoAt(v.tag as Int)
+            presenter?.playVideoAt(v.tag as Int)
         }
     }
 
     override fun onLongClick(v: View) =
             if (v.parent === mRecyclerView) {
                 val index = v.tag as Int
-                presenter.showVideoOptionsMenu(index) { video ->
+                presenter?.showVideoOptionsMenu(index) { video ->
                     val headersCount = mAdapterWrapper.headersCount
                     val position = headersCount + index
                     val videoWritable = video.isWritable
@@ -317,11 +320,11 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
                     mVideoOptionsMenu!!.setItemEnabled(R.id.rename, videoWritable)
                     mVideoOptionsMenu!!.setOnItemClickListener { menuItem, _ ->
                         when (menuItem.iconResId) {
-                            R.drawable.ic_file_move_menu -> presenter.moveVideoAt(index)
-                            R.drawable.ic_delete_24dp_menu -> presenter.deleteVideoAt(index)
-                            R.drawable.ic_edit_24dp_menu -> presenter.renameVideoAt(index)
-                            R.drawable.ic_share_24dp_menu -> presenter.shareVideoAt(index)
-                            R.drawable.ic_info_24dp_menu -> presenter.viewDetailsOfVideoAt(index)
+                            R.drawable.ic_file_move_menu -> presenter?.moveVideoAt(index)
+                            R.drawable.ic_delete_24dp_menu -> presenter?.deleteVideoAt(index)
+                            R.drawable.ic_edit_24dp_menu -> presenter?.renameVideoAt(index)
+                            R.drawable.ic_share_24dp_menu -> presenter?.shareVideoAt(index)
+                            R.drawable.ic_info_24dp_menu -> presenter?.viewDetailsOfVideoAt(index)
                         }
                     }
                     mVideoOptionsMenu!!.setOnDismissListener {
@@ -343,7 +346,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
         mLifecycleCallback?.onFragmentViewCreated(this)
-        presenter.onViewCreated(this)
+        presenter?.onViewCreated(this)
     }
 
     override fun onDestroyView() {
@@ -353,12 +356,15 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
         mSelectedItemIndex = NO_POSITION
         mVideoOptionsMenu?.dismiss()
 
-        if (mSearchText != EMPTY_STRING) {
-            mSearchText = EMPTY_STRING
-            presenter.refreshList(EMPTY_STRING)
+        val presenter = presenter
+        if (presenter != null) {
+            if (mSearchText != EMPTY_STRING) {
+                mSearchText = EMPTY_STRING
+                presenter.refreshList(EMPTY_STRING)
+            }
+            presenter.stopLoadVideos()
+            presenter.onViewDestroyed(this)
         }
-        presenter.stopLoadVideos()
-        presenter.onViewDestroyed(this)
 
         mInteractionCallback.setOnRefreshLayoutChildScrollUpCallback(null)
     }
@@ -366,7 +372,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
     override fun onDetach() {
         super.onDetach()
         mLifecycleCallback?.onFragmentDetached(this)
-        presenter.detachFromView(this)
+        presenter?.detachFromView(this)
     }
 
     override fun onReturnResult(resultCode: Int, data: Intent?) {
@@ -375,7 +381,7 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
 
     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
         super.onActivityResult(requestCode, resultCode, data)
-        presenter.onActivityResult(requestCode, resultCode, data)
+        presenter?.onActivityResult(requestCode, resultCode, data)
     }
 
     override fun updateListVisibilityAndSearchResultText() {
@@ -466,7 +472,9 @@ class LocalSearchedVideosFragment : BaseFragment(), ILocalSearchedVideosView, Vi
         }
     }
 
-    override fun onRefresh() = presenter.startLoadVideos()
+    override fun onRefresh() {
+        presenter?.startLoadVideos()
+    }
 
     override fun onVideosLoadStart() {
         mVideoOptionsMenu?.dismiss()
diff --git a/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideoListFragment.kt b/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideoListFragment.kt
index 12606a5..6882054 100644
--- a/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideoListFragment.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideoListFragment.kt
@@ -55,6 +55,7 @@ import com.liuzhenlin.videos.presenter.ILocalVideoListPresenter.VideoListAdapter
 import com.liuzhenlin.videos.presenter.ILocalVideoListPresenter.VideoListAdapter.Companion.PAYLOAD_REFRESH_VIDEODIR_THUMB
 import com.liuzhenlin.videos.presenter.ILocalVideoListPresenter.VideoListAdapter.Companion.VIEW_TYPE_VIDEO
 import com.liuzhenlin.videos.presenter.ILocalVideoListPresenter.VideoListAdapter.Companion.VIEW_TYPE_VIDEODIR
+import com.liuzhenlin.videos.presenter.Presenter
 import com.liuzhenlin.videos.utils.VideoUtils2
 import com.liuzhenlin.videos.view.IView
 import com.liuzhenlin.videos.view.fragment.Payloads.*
@@ -132,7 +133,8 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
     private var mShareButton_IOW: TextView? = null
     private var mDetailsButton_IOW: TextView? = null
 
-    internal val presenter = ILocalVideoListPresenter.newInstance()
+    internal var presenter: ILocalVideoListPresenter? = null
+        private set
 
     private var _TOP: String? = null
     private val TOP: String
@@ -180,6 +182,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
         super.onAttach(context)
 
         val parent = parentFragment
+        presenter = Presenter.Provider(this).get(ILocalVideoListPresenter.getImplClass())
 
         mInteractionCallback = when {
             parent is InteractionCallback -> parent
@@ -197,7 +200,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
         }
         mLifecycleCallback?.onFragmentAttached(this)
 
-        presenter.attachToView(this)
+        presenter?.attachToView(this)
     }
 
     override fun onCreateView(
@@ -256,42 +259,42 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
         mLifecycleCallback?.onFragmentViewCreated(this)
-        presenter.onViewCreated(this)
+        presenter?.onViewCreated(this)
     }
 
     override fun onStart() {
         super.onStart()
-        presenter.onViewStart(this)
+        presenter?.onViewStart(this)
     }
 
     override fun onResume() {
         super.onResume()
-        presenter.onViewResume(this)
+        presenter?.onViewResume(this)
     }
 
     override fun onPause() {
         super.onPause()
-        presenter.onViewPaused(this)
+        presenter?.onViewPaused(this)
     }
 
     // This method can be called when a stopped activity is being recreated,
     // in which case onStop() is being called unexpectedly.
     override fun onStop() {
         super.onStop()
-        presenter.onViewStopped(this)
+        presenter?.onViewStopped(this)
     }
 
     override fun onDestroyView() {
         super.onDestroyView()
         mLifecycleCallback?.onFragmentViewDestroyed(this)
         dismissAllFloatingWindows()
-        presenter.onViewDestroyed(this)
+        presenter?.onViewDestroyed(this)
     }
 
     override fun onDetach() {
         super.onDetach()
         mLifecycleCallback?.onFragmentDetached(this)
-        presenter.detachFromView(this)
+        presenter?.detachFromView(this)
     }
 
     override fun onReturnResult(resultCode: Int, data: Intent?) {
@@ -309,7 +312,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
 
     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
         super.onActivityResult(requestCode, resultCode, data)
-        presenter.onActivityResult(requestCode, resultCode, data)
+        presenter?.onActivityResult(requestCode, resultCode, data)
     }
 
     override fun goToLocalVideoSubListFragment(args: Bundle) =
@@ -318,7 +321,9 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
     override fun goToVideoMoveFragment(args: Bundle) =
             mInteractionCallback.goToVideoMoveFragment(args)
 
-    override fun onRefresh() = presenter.startLoadVideos()
+    override fun onRefresh() {
+        presenter?.startLoadVideos()
+    }
 
     override fun dismissItemOptionsWindow() {
         // 1）自动刷新时隐藏弹出的多选窗口
@@ -543,29 +548,29 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                 val index = v.tag as Int
                 if (mItemOptionsWindow == null) {
                     when (mAdapterWrapper.innerAdapter.getItemViewType(index)) {
-                        VIEW_TYPE_VIDEO -> presenter.playVideoAt(index) // 播放视频
+                        VIEW_TYPE_VIDEO -> presenter?.playVideoAt(index) // 播放视频
                         VIEW_TYPE_VIDEODIR -> { // 显示指定目录的视频
-                            presenter.openVideoDirectoryAt(index)
+                            presenter?.openVideoDirectoryAt(index)
                         }
                     }
                 } else {
-                    presenter.toggleItemChecked(index)
+                    presenter?.toggleItemChecked(index)
                 }
             }
 
             R.id.checkbox -> {
                 val index = v.tag as Int
-                presenter.toggleItemChecked(index)
+                presenter?.toggleItemChecked(index)
             }
 
             // 置顶或取消置顶视频（目录）
             R.id.btn_top -> {
                 val index = v.tag as Int
-                presenter.toggleItemTopped(index)
+                presenter?.toggleItemTopped(index)
             }
 
             // 删除视频
-            R.id.btn_delete -> presenter.deleteItemAt(v.tag as Int, true)
+            R.id.btn_delete -> presenter?.deleteItemAt(v.tag as Int, true)
             R.id.btn_confirm_deleteVideoListItemDialog -> {
                 val window = mDeleteItemDialog!!.window!!
                 val decorView = window.decorView as ViewGroup
@@ -578,16 +583,16 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                 if (onDeleteAction != null) {
                     onDeleteAction()
                 } else {
-                    presenter.deleteItem(item, false)
+                    presenter?.deleteItem(item, false)
                 }
             }
             R.id.btn_cancel_deleteVideoListItemDialog -> mDeleteItemDialog!!.cancel()
 
             // 移动（多个）视频
-            R.id.btn_move -> presenter.moveCheckedItems()
+            R.id.btn_move -> presenter?.moveCheckedItems()
 
             // 删除（多个）视频
-            R.id.btn_delete_vlow -> presenter.deleteCheckedItems(true)
+            R.id.btn_delete_vlow -> presenter?.deleteCheckedItems(true)
             R.id.btn_confirm_deleteItemsWindow -> {
                 val view = mDeleteItemsWindow!!.contentView as ViewGroup
                 @Suppress("UNCHECKED_CAST")
@@ -602,9 +607,9 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                     onDeleteAction()
                 } else {
                     if (items.size == 1) {
-                        presenter.deleteItem(items[0], false)
+                        presenter?.deleteItem(items[0], false)
                     } else {
-                        presenter.deleteItems(*items, needUserConfirm = false)
+                        presenter?.deleteItems(*items, needUserConfirm = false)
                     }
                 }
             }
@@ -612,7 +617,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
 
             // 重命名视频或给视频目录取别名
             R.id.btn_rename -> {
-                presenter.renameCheckedItem()
+                presenter?.renameCheckedItem()
                 mItemOptionsWindow!!.dismiss()
             }
             R.id.btn_complete_renameVideoListItemDialog -> {
@@ -634,20 +639,20 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                     onRenameAction(newName)
                 } else {
                     item.name = newName
-                    presenter.renameItemTo(item)
+                    presenter?.renameItemTo(item)
                 }
             }
             R.id.btn_cancel_renameVideoListItemDialog -> mRenameItemDialog!!.cancel()
 
             // 分享
             R.id.btn_share -> {
-                presenter.shareCheckedVideo()
+                presenter?.shareCheckedVideo()
                 mItemOptionsWindow!!.dismiss()
             }
 
             // 显示视频（目录）详情
             R.id.btn_details -> {
-                presenter.viewCheckedItemDetails()
+                presenter?.viewCheckedItemDetails()
                 mItemOptionsWindow!!.dismiss()
             }
             R.id.btn_ok_videoListItemDetailsDialog -> mItemDetailsDialog!!.cancel()
@@ -657,10 +662,10 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
             R.id.btn_selectAll -> {
                 // 全选
                 if (SELECT_ALL == mSelectAllButton!!.text.toString()) {
-                    presenter.selectAllItems()
+                    presenter?.selectAllItems()
                     // 全不选
                 } else {
-                    presenter.unselectAllItems()
+                    presenter?.unselectAllItems()
                 }
             }
 
@@ -670,7 +675,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                     SORT_MODE_NAME_DESC -> SORT_MODE_NAME_ASC
                     else -> SORT_MODE_NAME_ASC
                 }
-                presenter.reorderAllItems(sortMode)
+                presenter?.reorderAllItems(sortMode)
             }
             R.id.btn_sortByDate -> {
                 val sortMode = when (mSortByDateBtn.tag) {
@@ -678,7 +683,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                     SORT_MODE_DATE_DESC -> SORT_MODE_DATE_ASC
                     else -> SORT_MODE_DATE_ASC
                 }
-                presenter.reorderAllItems(sortMode)
+                presenter?.reorderAllItems(sortMode)
             }
             R.id.btn_sortBySize -> {
                 val sortMode = when (mSortBySizeBtn.tag) {
@@ -686,7 +691,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                     SORT_MODE_SIZE_DESC -> SORT_MODE_SIZE_ASC
                     else -> SORT_MODE_SIZE_ASC
                 }
-                presenter.reorderAllItems(sortMode)
+                presenter?.reorderAllItems(sortMode)
             }
         }
     }
@@ -804,7 +809,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
                         notifyItemRangeChanged(position + 1, itemCount - position - 1,
                                 PAYLOAD_CHANGE_CHECKBOX_VISIBILITY or PAYLOAD_REFRESH_CHECKBOX)
                         // 勾选当前长按的itemView
-                        presenter.setItemChecked(itemIndex, true)
+                        presenter?.setItemChecked(itemIndex, true)
                         notifyItemChanged(position,
                                 PAYLOAD_CHANGE_CHECKBOX_VISIBILITY
                                         or PAYLOAD_REFRESH_CHECKBOX_WITH_ANIMATOR)
@@ -827,7 +832,7 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
 
                     val headersCount = mAdapterWrapper.headersCount
                     for (index in 0 until mAdapterWrapper.itemCount - headersCount) {
-                        presenter.setItemChecked(index, false)
+                        presenter?.setItemChecked(index, false)
                     }
                     mAdapterWrapper.notifyItemRangeChanged(
                             headersCount, mAdapterWrapper.itemCount - headersCount,
@@ -1216,7 +1221,9 @@ class LocalVideoListFragment : BaseFragment(), ILocalVideoListView,
         }
     }
 
-    override fun showVideosMovePage(vararg items: VideoListItem) = presenter.moveItems(*items)
+    override fun showVideosMovePage(vararg items: VideoListItem) {
+        presenter?.moveItems(*items)
+    }
 
     override fun onItemsDeleteStart(vararg items: VideoListItem) {
         if (mItemsDeletingDialog == null) {
diff --git a/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideosFragment.kt b/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideosFragment.kt
index c836fc6..d3d6414 100644
--- a/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideosFragment.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/view/fragment/LocalVideosFragment.kt
@@ -117,17 +117,18 @@ class LocalVideosFragment : Fragment(), ILocalVideosFragment, FragmentPartLifecy
 
                 val sublistFragmentIndex = mLocalVideoSubListFragments?.indexOf(childFragment) ?: -1
                 if (sublistFragmentIndex >= 0) {
-                    mLocalVideoListFragment.presenter
-                            .addOnVideoItemsLoadListener(childFragment.presenter)
-                    if (childFragment.presenter is LocalVideoListPresenter) {
-                        val lastFragment =
-                                if (sublistFragmentIndex > 0)
-                                    mLocalVideoSubListFragments!![sublistFragmentIndex - 1]
-                                else
-                                    mLocalVideoListFragment
-                        val parentPresenter = lastFragment.presenter
-                        if (parentPresenter is LocalVideoListPresenter)
-                            childFragment.presenter.setParentPresenter(parentPresenter)
+                    childFragment.presenter?.let {
+                        mLocalVideoListFragment.presenter?.addOnVideoItemsLoadListener(it)
+                        if (it is LocalVideoListPresenter) {
+                            val lastFragment =
+                                    if (sublistFragmentIndex > 0)
+                                        mLocalVideoSubListFragments!![sublistFragmentIndex - 1]
+                                    else
+                                        mLocalVideoListFragment
+                            val parentPresenter = lastFragment.presenter
+                            if (parentPresenter is LocalVideoListPresenter)
+                                it.setParentPresenter(parentPresenter)
+                        }
                     }
 
                     mInteractionCallback.setSideDrawerEnabled(false)
@@ -139,7 +140,9 @@ class LocalVideosFragment : Fragment(), ILocalVideosFragment, FragmentPartLifecy
 
             childFragment === mLocalSearchedVideosFragment -> {
                 childFragment.setVideoOpCallback(mLocalVideoListFragment)
-                mLocalVideoListFragment.presenter.addOnVideoItemsLoadListener(childFragment.presenter)
+                childFragment.presenter?.let {
+                    mLocalVideoListFragment.presenter?.addOnVideoItemsLoadListener(it)
+                }
                 mSwipeRefreshLayout.setOnRefreshListener(childFragment)
 
                 mInteractionCallback.setSideDrawerEnabled(false)
@@ -163,8 +166,9 @@ class LocalVideosFragment : Fragment(), ILocalVideosFragment, FragmentPartLifecy
                 val sublistFragmentIndex = mLocalVideoSubListFragments?.indexOf(childFragment) ?: -1
                 if (sublistFragmentIndex >= 0) {
                     mLocalVideoSubListFragments!!.removeAt(sublistFragmentIndex)
-                    mLocalVideoListFragment.presenter
-                            .removeOnVideoItemsLoadListener(childFragment.presenter)
+                    childFragment.presenter?.let {
+                        mLocalVideoListFragment.presenter?.removeOnVideoItemsLoadListener(it)
+                    }
                     if (sublistFragmentIndex == 0) {
                         mSwipeRefreshLayout.setOnRefreshListener(mLocalVideoListFragment)
 
@@ -178,8 +182,9 @@ class LocalVideosFragment : Fragment(), ILocalVideosFragment, FragmentPartLifecy
                 }
             }
             childFragment === mLocalSearchedVideosFragment -> {
-                mLocalVideoListFragment.presenter
-                        .removeOnVideoItemsLoadListener(childFragment.presenter)
+                childFragment.presenter?.let {
+                    mLocalVideoListFragment.presenter?.removeOnVideoItemsLoadListener(it)
+                }
                 mLocalSearchedVideosFragment = null
                 mSwipeRefreshLayout.setOnRefreshListener(mLocalVideoListFragment)
 
@@ -216,7 +221,7 @@ class LocalVideosFragment : Fragment(), ILocalVideosFragment, FragmentPartLifecy
 
     override fun goToLocalSearchedVideosFragment() {
         mLocalSearchedVideosFragment = LocalSearchedVideosFragment()
-        mLocalVideoListFragment.presenter.setArgsForLocalSearchedVideosFragment(
+        mLocalVideoListFragment.presenter?.setArgsForLocalSearchedVideosFragment(
                 mLocalSearchedVideosFragment!!)
         mLocalSearchedVideosFragment!!.setTargetFragment(
                 mLocalVideoListFragment, REQUEST_CODE_LOCAL_SEARCHED_VIDEOS_FRAGMENT)
diff --git a/app/src/main/java/com/liuzhenlin/videos/view/fragment/VideoMoveFragment.kt b/app/src/main/java/com/liuzhenlin/videos/view/fragment/VideoMoveFragment.kt
index e8593f3..5bb6acf 100644
--- a/app/src/main/java/com/liuzhenlin/videos/view/fragment/VideoMoveFragment.kt
+++ b/app/src/main/java/com/liuzhenlin/videos/view/fragment/VideoMoveFragment.kt
@@ -35,6 +35,7 @@ import com.liuzhenlin.videos.bean.Video
 import com.liuzhenlin.videos.bean.VideoDirectory
 import com.liuzhenlin.videos.contextThemedFirst
 import com.liuzhenlin.videos.presenter.IVideoMovePresenter
+import com.liuzhenlin.videos.presenter.Presenter
 import com.liuzhenlin.videos.utils.VideoUtils2
 import com.liuzhenlin.videos.videoCount
 import com.liuzhenlin.videos.view.IView
@@ -74,32 +75,33 @@ class VideoMoveFragment : FullscreenDialogFragment<IVideoMovePresenter>(R.layout
 
     private var mVideoMovingDialog: Dialog? = null
 
-    private val mPresenter = IVideoMovePresenter.newInstance()
+    private var mPresenter: IVideoMovePresenter? = null
 
     init {
         lifecycle.addObserver(object : DefaultLifecycleObserver {
             override fun onStart(owner: LifecycleOwner) =
-                    mPresenter.onViewStart(this@VideoMoveFragment)
+                    mPresenter?.onViewStart(this@VideoMoveFragment) ?: Unit
 
             override fun onResume(owner: LifecycleOwner) =
-                    mPresenter.onViewResume(this@VideoMoveFragment)
+                    mPresenter?.onViewResume(this@VideoMoveFragment) ?: Unit
 
             override fun onPause(owner: LifecycleOwner) =
-                    mPresenter.onViewPaused(this@VideoMoveFragment)
+                    mPresenter?.onViewPaused(this@VideoMoveFragment) ?: Unit
 
             override fun onStop(owner: LifecycleOwner) =
-                    mPresenter.onViewStopped(this@VideoMoveFragment)
+                    mPresenter?.onViewStopped(this@VideoMoveFragment) ?: Unit
         })
     }
 
     override fun onAttach(context: Context) {
         super.onAttach(context)
-        mPresenter.attachToView(this)
+        mPresenter = Presenter.Provider(this).get(IVideoMovePresenter.getImplClass())
+        mPresenter?.attachToView(this)
     }
 
     override fun onDetach() {
         super.onDetach()
-        mPresenter.detachFromView(this)
+        mPresenter?.detachFromView(this)
     }
 
     override fun onScreenWidthDpLevelChanged(
@@ -110,7 +112,7 @@ class VideoMoveFragment : FullscreenDialogFragment<IVideoMovePresenter>(R.layout
 
     override fun onDialogCreated(dialog: Dialog) {
         super.onDialogCreated(dialog)
-        mPresenter.onViewCreated(this)
+        mPresenter?.onViewCreated(this)
     }
 
     override fun init(adapter: TargetDirListAdapter, videoQuantity: Int) {
@@ -137,18 +139,18 @@ class VideoMoveFragment : FullscreenDialogFragment<IVideoMovePresenter>(R.layout
 
     override fun onRestoreInstanceState(savedInstanceState: Bundle?) {
         super.onRestoreInstanceState(savedInstanceState)
-        mPresenter.restoreInstanceState(savedInstanceState)
+        mPresenter?.restoreInstanceState(savedInstanceState)
     }
 
     override fun onSaveInstanceState(outState: Bundle) {
         super.onSaveInstanceState(outState)
-        mPresenter.saveInstanceState(outState)
+        mPresenter?.saveInstanceState(outState)
     }
 
     override fun onDismiss(dialog: DialogInterface) {
         super.onDismiss(dialog)
         mVideoMovingDialog?.dismiss()
-        mPresenter.onViewDestroyed(this)
+        mPresenter?.onViewDestroyed(this)
         mVideoDirList = null
         mTitleText = null
         mOkayButton = null
@@ -156,7 +158,7 @@ class VideoMoveFragment : FullscreenDialogFragment<IVideoMovePresenter>(R.layout
 
     override fun onClick(v: View) {
         when (v.id) {
-            R.id.btn_ok -> mPresenter.moveVideosToCheckedDir()
+            R.id.btn_ok -> mPresenter?.moveVideosToCheckedDir()
             R.id.btn_cancel -> dismiss()
 
             R.id.btn_ok_vmpd -> {
@@ -164,7 +166,7 @@ class VideoMoveFragment : FullscreenDialogFragment<IVideoMovePresenter>(R.layout
                 val checkbox = promptDialog.findViewById<CheckBox>(R.id.checkbox)
                 val neverPromptAgain = checkbox!!.isChecked
                 promptDialog.cancel()
-                mPresenter.onVideoMovePromptConfirmed(neverPromptAgain)
+                mPresenter?.onVideoMovePromptConfirmed(neverPromptAgain)
             }
             R.id.btn_cancel_vmpd -> {
                 val promptDialog = v.tag as AppCompatDialog
@@ -279,7 +281,7 @@ class VideoMoveFragment : FullscreenDialogFragment<IVideoMovePresenter>(R.layout
 
         override fun onClick(v: View) {
             val position = v.tag as Int
-            mPresenter.toggleTargetDirChecked(position)
+            mPresenter?.toggleTargetDirChecked(position)
         }
     }
 }
\ No newline at end of file
diff --git a/common_build.gradle b/common_build.gradle
index b3351c8..c51c544 100644
--- a/common_build.gradle
+++ b/common_build.gradle
@@ -8,6 +8,7 @@ final boolean appModule = plugins.hasPlugin('com.android.application')
 if (appModule) {
     apply plugin: 'com.guardsquare.proguard'
 }
+apply plugin: 'kotlin-android'
 
 android {
     compileSdkVersion rootProject.ext.compileSdkVersion
@@ -42,6 +43,7 @@ if (appModule) {
 
 dependencies {
     implementation fileTree(dir: 'libs', include: ['*.jar'])
+    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
     implementation "androidx.appcompat:appcompat:$rootProject.ext.appcompatVersion"
 
     testImplementation "junit:junit:$rootProject.ext.testJunitVersion"
diff --git a/libraries/common/src/main/java/androidx/lifecycle/LifecycleCoroutineScopeImplAccessor.java b/libraries/common/src/main/java/androidx/lifecycle/LifecycleCoroutineScopeImplAccessor.java
new file mode 100644
index 0000000..2856273
--- /dev/null
+++ b/libraries/common/src/main/java/androidx/lifecycle/LifecycleCoroutineScopeImplAccessor.java
@@ -0,0 +1,24 @@
+/*
+ * Created on 2025-1-6 9:15:21 PM.
+ * Copyright © 2025 刘振林. All rights reserved.
+ */
+
+package androidx.lifecycle;
+
+import androidx.annotation.NonNull;
+
+import kotlin.coroutines.CoroutineContext;
+
+/** @noinspection KotlinInternalInJava*/
+public class LifecycleCoroutineScopeImplAccessor {
+
+    @NonNull
+    public static LifecycleCoroutineScopeImpl newLifecycleCoroutineScopeImpl(
+            @NonNull Lifecycle lifecycle, @NonNull CoroutineContext coroutineContext) {
+        return new LifecycleCoroutineScopeImpl(lifecycle, coroutineContext);
+    }
+
+    public static void register(@NonNull LifecycleCoroutineScopeImpl impl) {
+        impl.register();
+    }
+}
diff --git a/libraries/common/src/main/java/androidx/lifecycle/ViewModelAccessor.java b/libraries/common/src/main/java/androidx/lifecycle/ViewModelAccessor.java
new file mode 100644
index 0000000..f8b2f22
--- /dev/null
+++ b/libraries/common/src/main/java/androidx/lifecycle/ViewModelAccessor.java
@@ -0,0 +1,25 @@
+/*
+ * Created on 2025-1-6 8:52:55 PM.
+ * Copyright © 2025 刘振林. All rights reserved.
+ */
+
+package androidx.lifecycle;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+public class ViewModelAccessor {
+    private ViewModelAccessor() {
+    }
+
+    @Nullable
+    public static <T> T getTag(@NonNull ViewModel viewModel, @NonNull String key) {
+        return viewModel.getTag(key);
+    }
+
+    @NonNull
+    public static <T> T setTagIfAbsent(
+            @NonNull ViewModel viewModel, @NonNull String key, @NonNull T newValue) {
+        return viewModel.setTagIfAbsent(key, newValue);
+    }
+}
diff --git a/libraries/common/src/main/java/com/liuzhenlin/common/utils/CloseableCoroutineScope.kt b/libraries/common/src/main/java/com/liuzhenlin/common/utils/CloseableCoroutineScope.kt
new file mode 100644
index 0000000..f44e557
--- /dev/null
+++ b/libraries/common/src/main/java/com/liuzhenlin/common/utils/CloseableCoroutineScope.kt
@@ -0,0 +1,20 @@
+/*
+ * Created on 2025-1-6 9:04:11 PM.
+ * Copyright © 2025 刘振林. All rights reserved.
+ */
+
+package com.liuzhenlin.common.utils
+
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.cancel
+import java.io.Closeable
+import kotlin.coroutines.CoroutineContext
+
+class CloseableCoroutineScope(context: CoroutineContext) : Closeable, CoroutineScope {
+
+    override val coroutineContext: CoroutineContext = context
+
+    override fun close() {
+        coroutineContext.cancel()
+    }
+}
\ No newline at end of file
diff --git a/libraries/common/src/main/java/com/liuzhenlin/common/utils/Coroutines.kt b/libraries/common/src/main/java/com/liuzhenlin/common/utils/Coroutines.kt
new file mode 100644
index 0000000..39ff39c
--- /dev/null
+++ b/libraries/common/src/main/java/com/liuzhenlin/common/utils/Coroutines.kt
@@ -0,0 +1,198 @@
+/*
+ * Created on 2025-1-6 9:56:52 PM.
+ * Copyright © 2025 刘振林. All rights reserved.
+ */
+@file:JvmName("Coroutines")
+
+package com.liuzhenlin.common.utils
+
+import android.annotation.SuppressLint
+import android.os.AsyncTask
+import android.os.Binder
+import android.os.Process
+import android.util.Log
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.LifecycleCoroutineScope
+import androidx.lifecycle.LifecycleCoroutineScopeImplAccessor
+import androidx.lifecycle.LifecycleOwner
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.ViewModelAccessor
+import kotlinx.coroutines.CoroutineDispatcher
+import kotlinx.coroutines.CoroutineExceptionHandler
+import kotlinx.coroutines.CoroutineName
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Deferred
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.asCoroutineDispatcher
+import kotlinx.coroutines.async
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.plus
+import java.util.concurrent.Callable
+import java.util.concurrent.FutureTask
+import kotlin.coroutines.CoroutineContext
+
+private const val TAG = "Coroutines"
+
+private const val KEY_VIEW_MODEL_SCOPE = "com.liuzhenlin.common.utils.Coroutines.viewModelScope"
+
+object AppScope : CoroutineScope {
+    override val coroutineContext: CoroutineContext =
+            newCoroutineContext("AppScope", Dispatchers.CPU)
+}
+
+public val ViewModel.viewModelScope: CoroutineScope
+    get() {
+        val scope: CoroutineScope? = ViewModelAccessor.getTag(this, KEY_VIEW_MODEL_SCOPE)
+        if (scope != null) {
+            return scope
+        }
+        return ViewModelAccessor.setTagIfAbsent(this, KEY_VIEW_MODEL_SCOPE,
+                CloseableCoroutineScope(
+                        newCoroutineContext("ViewModelScope", Dispatchers.CPU)))
+    }
+
+public inline val ViewModel.modelScope: CoroutineScope
+    get() = viewModelScope + CoroutineName("ModelScope") + Dispatchers.IO
+
+public inline val LifecycleOwner.lifecycleScope: LifecycleCoroutineScope
+    get() = lifecycle.lifecycleScope
+
+public val Lifecycle.lifecycleScope: LifecycleCoroutineScope
+    @SuppressLint("RestrictedApi")
+    get() {
+        while (true) {
+            val existing = internalScopeRef.get() as LifecycleCoroutineScope?
+            if (existing != null) {
+                return existing
+            }
+            val newScope =
+                    LifecycleCoroutineScopeImplAccessor.newLifecycleCoroutineScopeImpl(
+                            this, newCoroutineContext("LifecycleScope", Dispatchers.Main.immediate))
+            if (internalScopeRef.compareAndSet(null, newScope)) {
+                LifecycleCoroutineScopeImplAccessor.register(newScope)
+                return newScope
+            }
+        }
+    }
+
+private fun newCoroutineContext(name: String, dispatcher: CoroutineDispatcher): CoroutineContext {
+    return CoroutineName(name) + SupervisorJob() + dispatcher + loggingExceptionHandler
+}
+
+private val loggingExceptionHandler = CoroutineExceptionHandler { coroutineScope, throwable ->
+    Log.w(TAG, coroutineScope[CoroutineName.Key]?.name, throwable)
+}
+
+public inline val Dispatchers.CPU get() = Dispatchers.Default
+
+public val Dispatchers.Single by lazy { Executors.SERIAL_EXECUTOR.asCoroutineDispatcher() }
+
+@JvmName("executeAsyncTask")
+fun <Result> AsyncTask<*, *, Result>.executeOnCoroutine(
+        scope: CoroutineScope, context: CoroutineContext, vararg params: Any)
+: Deferred<Result?> {
+    val status = status
+    if (status != AsyncTask.Status.PENDING) {
+        when (status) {
+            AsyncTask.Status.RUNNING ->
+                throw IllegalStateException("Cannot execute task: the task is already running.")
+            AsyncTask.Status.FINISHED ->
+                throw IllegalStateException(
+                        "Cannot execute task: the task has already been executed " +
+                                "(a task can be executed only once)")
+            else -> {}
+        }
+    }
+    statusField?.set(this, AsyncTask.Status.RUNNING)
+
+    onPreExecuteMethod?.invoke(this)
+
+    @Suppress("UNCHECKED_CAST")
+    val futureTask: FutureTask<Result>? = futureField?.get(this) as FutureTask<Result>?
+    if (futureTask != null && params.isNotEmpty()) {
+        workerParamsField?.set(workerField?.get(this), params)
+            ?: {
+                val workerRunnable = object : WorkerRunnable<Any, Result>() {
+                    override fun call(): Result? {
+                        taskInvokedField?.set(this@executeOnCoroutine, true)
+                        var result: Result? = null
+                        try {
+                            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)
+                            @Suppress("UNCHECKED_CAST")
+                            result = doInBackgroundMethod?.invoke(this@executeOnCoroutine, mParams)
+                                    as Result?
+                            Binder.flushPendingCommands()
+                        } catch (tr: Throwable) {
+                            cancel(false)
+                            throw tr
+                        } finally {
+                            postResult(result)
+                        }
+                        return result
+                    }
+                }
+                workerRunnable.mParams = arrayOf(params)
+                futureTask.callableField?.set(futureTask, workerRunnable)
+            }
+    }
+    return scope.async(context) {
+        if (futureTask != null) {
+            futureTask.run()
+            return@async futureTask.get()
+        }
+        return@async null
+    }
+}
+
+private val AsyncTask<*, *, *>.statusField by lazy {
+    ReflectionUtils.getDeclaredField(AsyncTask::class.java, "mStatus")
+}
+private val AsyncTask<*, *, *>.taskInvokedField by lazy {
+    ReflectionUtils.getDeclaredField(AsyncTask::class.java, "mTaskInvoked")
+}
+private val AsyncTask<*, *, *>.workerField by lazy {
+    ReflectionUtils.getDeclaredField(AsyncTask::class.java, "mWorker")
+}
+private val AsyncTask<*, *, *>.workerParamsField by lazy {
+    val workerRunnableClass = ReflectionUtils.getDeclaredClass(AsyncTask::class.java,
+            "android.os.AsyncTask\$WorkerRunnable")
+    if (workerRunnableClass != null) {
+        return@lazy ReflectionUtils.getDeclaredField(workerRunnableClass, "mParams")
+    }
+    return@lazy null
+}
+private val AsyncTask<*, *, *>.futureField by lazy {
+    ReflectionUtils.getDeclaredField(AsyncTask::class.java, "mFuture")
+}
+private val FutureTask<*>.callableField by lazy {
+    ReflectionUtils.getDeclaredField(FutureTask::class.java, "callable")
+}
+private val AsyncTask<*, *, *>.onPreExecuteMethod by lazy {
+    ReflectionUtils.getDeclaredMethod(AsyncTask::class.java, "onPreExecute")
+}
+private val AsyncTask<*, *, *>.doInBackgroundMethod by lazy {
+    ReflectionUtils.getDeclaredMethod(AsyncTask::class.java, "doInBackground",
+            Array<Any>::class.java)
+}
+private val AsyncTask<*, *, *>.onCancelledMethod by lazy {
+    ReflectionUtils.getDeclaredMethod(AsyncTask::class.java, "onCancelled", Any::class.java)
+}
+private val AsyncTask<*, *, *>.onPostExecuteMethod by lazy {
+    ReflectionUtils.getDeclaredMethod(AsyncTask::class.java, "onPostExecute", Any::class.java)
+}
+
+private fun <Result> AsyncTask<*, *, Result>.postResult(result: Result?) {
+    AppScope.launch(Dispatchers.Main) {
+        if (isCancelled) {
+            onCancelledMethod?.invoke(this@postResult, result)
+        } else {
+            onPostExecuteMethod?.invoke(this@postResult, result)
+        }
+        statusField?.set(this@postResult, AsyncTask.Status.FINISHED)
+    }
+}
+
+private abstract class WorkerRunnable<Params, Result> : Callable<Result> {
+    var mParams: Array<Params>? = null
+}
\ No newline at end of file
diff --git a/libraries/common/src/main/java/com/liuzhenlin/common/utils/JCoroutine.java b/libraries/common/src/main/java/com/liuzhenlin/common/utils/JCoroutine.java
new file mode 100644
index 0000000..1f83d45
--- /dev/null
+++ b/libraries/common/src/main/java/com/liuzhenlin/common/utils/JCoroutine.java
@@ -0,0 +1,134 @@
+/*
+ * Created on 2025-1-4 7:31:41 PM.
+ * Copyright © 2025 刘振林. All rights reserved.
+ */
+
+package com.liuzhenlin.common.utils;
+
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.core.util.Consumer;
+import androidx.core.util.Supplier;
+
+import kotlin.coroutines.Continuation;
+import kotlin.coroutines.CoroutineContext;
+import kotlin.coroutines.EmptyCoroutineContext;
+import kotlinx.coroutines.BuildersKt;
+import kotlinx.coroutines.CoroutineDispatcher;
+import kotlinx.coroutines.CoroutineScope;
+import kotlinx.coroutines.CoroutineStart;
+import kotlinx.coroutines.Deferred;
+import kotlinx.coroutines.Dispatchers;
+import kotlinx.coroutines.Job;
+
+@JavaOnly
+@NonNullApi
+public class JCoroutine {
+
+    private static final String TAG = "JCoroutine";
+
+    public static final CoroutineDispatcher CpuDispatcher =
+            Coroutines.getCPU(Dispatchers.INSTANCE);
+    public static final CoroutineDispatcher SingleDispatcher =
+            Coroutines.getSingle(Dispatchers.INSTANCE);
+
+    private static final Continuation<?> EmptyContinuation =
+            createContinuation(EmptyCoroutineContext.INSTANCE, null);
+
+    public static <T> Continuation<T> emptyContinuation() {
+        //noinspection unchecked
+        return (Continuation<T>) EmptyContinuation;
+    }
+
+    public static <T> Continuation<T> createContinuation(
+            CoroutineContext context, @Nullable Consumer<T> resumeWith) {
+        return new Continuation<T>() {
+            @NonNull
+            @Override
+            public CoroutineContext getContext() {
+                return context;
+            }
+
+            @Override
+            public void resumeWith(Object o) {
+                if (resumeWith != null) {
+                    withContext(getContext(), () -> {
+                        //noinspection unchecked
+                        resumeWith.accept((T) o);
+                    });
+                }
+            }
+        };
+    }
+
+    public static Job launch(CoroutineScope scope, Runnable block) {
+        return launch(scope, EmptyCoroutineContext.INSTANCE, block);
+    }
+
+    public static Job launch(
+            CoroutineScope scope, CoroutineContext context, Runnable block) {
+        return launch(scope, context, CoroutineStart.DEFAULT, block);
+    }
+
+    public static Job launch(
+            CoroutineScope scope, CoroutineContext context, CoroutineStart start, Runnable block) {
+        return BuildersKt.launch(scope, context, start, (coroutineScope, continuation) -> {
+            block.run();
+            return null;
+        });
+    }
+
+    public static <T> Deferred<T> async(CoroutineScope scope, Supplier<T> block) {
+        return async(scope, EmptyCoroutineContext.INSTANCE, block);
+    }
+
+    public static <T> Deferred<T> async(
+            CoroutineScope scope, CoroutineContext context, Supplier<T> block) {
+        return async(scope, context, CoroutineStart.DEFAULT, block);
+    }
+
+    public static <T> Deferred<T> async(
+            CoroutineScope scope, CoroutineContext context, CoroutineStart start, Supplier<T> block) {
+        return BuildersKt.async(
+                scope, context, start, (coroutineScope, continuation) -> block.get());
+    }
+
+    public static void withContext(CoroutineContext context, Runnable block) {
+        Supplier<Void> supplier = () -> {
+            block.run();
+            //noinspection DataFlowIssue
+            return null;
+        };
+        withContext(context, supplier, emptyContinuation());
+    }
+
+    public static <T> void withContext(
+            CoroutineContext context, Supplier<T> block, Continuation<T> complemention) {
+        Supplier<Void> supplier = () -> {
+            BuildersKt.withContext(
+                    context, (coroutineScope, continuation) -> block.get(), complemention);
+            //noinspection DataFlowIssue
+            return null;
+        };
+        runBlocking(context, supplier);
+    }
+
+    /** @noinspection DataFlowIssue*/
+    @Nullable
+    public static <T> T runBlocking(CoroutineContext context, Supplier<T> block) {
+        return runBlocking(context, block, null);
+    }
+
+    /** @noinspection NullableProblems*/
+    public static <T> T runBlocking(
+            CoroutineContext context, Supplier<T> block, T defaultValueIfInterrupted) {
+        try {
+            return BuildersKt.runBlocking(context, ((coroutineScope, continuation) -> block.get()));
+        } catch (InterruptedException e) {
+            Log.w(TAG, e);
+        }
+        return defaultValueIfInterrupted;
+    }
+}
diff --git a/libraries/common/src/main/java/com/liuzhenlin/common/utils/JavaOnly.java b/libraries/common/src/main/java/com/liuzhenlin/common/utils/JavaOnly.java
new file mode 100644
index 0000000..7ab640f
--- /dev/null
+++ b/libraries/common/src/main/java/com/liuzhenlin/common/utils/JavaOnly.java
@@ -0,0 +1,22 @@
+/*
+ * Created on 2025-1-6 5:27:05 AM.
+ * Copyright © 2025 刘振林. All rights reserved.
+ */
+
+package com.liuzhenlin.common.utils;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Specifies that this class, function, field, etc. is only designed for Java. Other Interoperable
+ * programming language like Kotlin should not access.
+ */
+@Documented
+@Retention(RetentionPolicy.CLASS)
+@Target({ElementType.FIELD, ElementType.METHOD, ElementType.TYPE})
+public @interface JavaOnly {
+}
diff --git a/libraries/common/src/main/java/com/liuzhenlin/common/utils/ReflectionUtils.java b/libraries/common/src/main/java/com/liuzhenlin/common/utils/ReflectionUtils.java
index 194b83c..d834871 100644
--- a/libraries/common/src/main/java/com/liuzhenlin/common/utils/ReflectionUtils.java
+++ b/libraries/common/src/main/java/com/liuzhenlin/common/utils/ReflectionUtils.java
@@ -5,9 +5,12 @@
 
 package com.liuzhenlin.common.utils;
 
+import android.text.TextUtils;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
+import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -93,6 +96,31 @@ public class ReflectionUtils {
         return null;
     }
 
+    @Nullable
+    public static <T> Constructor<T> getDeclaredConstructor(
+            @NonNull Class<T> clazz, @Nullable Class<?>... parameterTypes) {
+        try {
+            Constructor<T> constructor = clazz.getDeclaredConstructor(parameterTypes);
+            constructor.setAccessible(true);
+            return constructor;
+        } catch (NoSuchMethodException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    @Nullable
+    public static Class<?> getDeclaredClass(@NonNull Class<?> clazz, @Nullable String className) {
+        if (!TextUtils.isEmpty(className)) {
+            for (Class<?> c : clazz.getDeclaredClasses()) {
+                if (c.getName().equals(className)) {
+                    return c;
+                }
+            }
+        }
+        return null;
+    }
+
     @Nullable
     public static <T> T getDeclaredFieldValue(
             @NonNull Class<?> clazz, @Nullable Object obj, @NonNull String fieldName) {
diff --git a/web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.java b/web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.java
deleted file mode 100644
index fd274c2..0000000
--- a/web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.java
+++ /dev/null
@@ -1,831 +0,0 @@
-/*
- * Created on 2022-2-18 5:54:39 PM.
- * Copyright © 2022 刘振林. All rights reserved.
- */
-
-package com.liuzhenlin.videos.web.youtube;
-
-import android.annotation.SuppressLint;
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
-import android.app.Service;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.media.AudioManager;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Looper;
-import android.os.Message;
-import android.os.Messenger;
-import android.os.SystemClock;
-import android.text.TextUtils;
-import android.view.View;
-import android.webkit.WebView;
-import android.widget.RemoteViews;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.core.app.ActivityCompat;
-import androidx.core.app.NotificationCompat;
-import androidx.core.util.Consumer;
-
-import com.liuzhenlin.common.Consts;
-import com.liuzhenlin.common.compat.AudioManagerCompat;
-import com.liuzhenlin.common.compat.RemoteViewsCompat;
-import com.liuzhenlin.common.notification.style.DecoratedMediaCustomViewStyle;
-import com.liuzhenlin.common.receiver.HeadsetEventsReceiver;
-import com.liuzhenlin.common.receiver.MediaButtonEventHandler;
-import com.liuzhenlin.common.receiver.MediaButtonEventReceiver;
-import com.liuzhenlin.common.utils.Executors;
-import com.liuzhenlin.common.utils.InternetResourceLoadTask;
-import com.liuzhenlin.common.utils.ListenerSet;
-import com.liuzhenlin.common.utils.NotificationChannelManager;
-import com.liuzhenlin.common.utils.SerialExecutor;
-import com.liuzhenlin.common.utils.Synthetic;
-import com.liuzhenlin.common.utils.ThemeUtils;
-import com.liuzhenlin.common.utils.Utils;
-import com.liuzhenlin.videos.web.AndroidWebView;
-import com.liuzhenlin.videos.web.R;
-import com.liuzhenlin.videos.web.bean.Playlist;
-import com.liuzhenlin.videos.web.bean.Video;
-import com.liuzhenlin.videos.web.player.Constants;
-import com.liuzhenlin.videos.web.player.PlayerWebView;
-import com.liuzhenlin.videos.web.player.Settings;
-import com.liuzhenlin.videos.web.player.WebPlayer;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Executor;
-
-import static com.liuzhenlin.common.utils.Utils.emptyIfStringNull;
-
-public class YoutubePlaybackService extends Service implements PlayerListener {
-
-    private static final int ID_NOTIFICATION = 20220216;
-
-    @SuppressLint("StaticFieldLeak")
-    private static YoutubePlaybackService sInstance;
-    private volatile boolean mRunning;
-
-    private Context mContext;
-
-    @Nullable /*package*/ PlayerWebView mView;
-
-    @Nullable @Synthetic WebPlayer mPlayer;
-    /*package*/ boolean mPlayerReady;
-
-    private long mSeekOnPlayerReady = Constants.UNKNOWN;
-
-    private String mNotiVideoId = "";
-    private String mVideoId = "";
-    private String mPlaylistId = "";
-
-    private int mLinkType;
-
-    private int mPlaylistSize;
-    private int mPlaylistIndex;
-
-    private volatile Video mVideo = EMPTY_VIDEO;
-    /*package*/ static final Video EMPTY_VIDEO = new Video();
-
-    @Youtube.PlayingStatus /*package*/ volatile int mPlayingStatus = Youtube.PlayingStatus.UNSTARTED;
-    private int mLastPlayingStatus = mPlayingStatus;
-
-    private boolean mReplayVideo;
-    private boolean mReplayPlaylist;
-
-    private volatile int mPlayPauseBtnImgSrc = R.drawable.ic_pause_white_24dp;
-    private volatile int mPlayPauseBtnContentDesc = R.string.pause;
-
-    private AudioManager mAudioManager;
-    private HeadsetEventsReceiver mHeadsetEventsReceiver;
-    private MediaButtonEventHandler mMediaButtonEventHandler;
-    private ComponentName mMediaButtonEventReceiverComponent;
-
-    private ListenerSet<PlayerListener> mListeners;
-
-    private static final Executor NOTIFICATION_EXECUTOR = new SerialExecutor() {
-        @Override
-        public synchronized void execute(@NonNull Runnable r) {
-            // Removes useless pending playback notifications in the middle for better performance
-            clear();
-            super.execute(r);
-        }
-    };
-
-    public static void peekIfNonnullThenDo(@NonNull Consumer<YoutubePlaybackService> consumer) {
-        YoutubePlaybackService service = sInstance;
-        if (service != null) {
-            consumer.accept(service);
-        }
-    }
-
-    @Nullable
-    public static YoutubePlaybackService get() {
-        return sInstance;
-    }
-
-    @Nullable
-    public WebPlayer getWebPlayer() {
-        return mPlayer;
-    }
-
-    public boolean isPlaying() {
-        int status = mPlayingStatus;
-        return status == Youtube.PlayingStatus.PLAYING
-                || status == Youtube.PlayingStatus.BUFFERRING;
-    }
-
-    private MediaButtonEventHandler getMediaButtonEventHandler() {
-        if (mMediaButtonEventHandler == null) {
-            mMediaButtonEventHandler = new MediaButtonEventHandler(new Messenger(new MsgHandler()));
-        }
-        return mMediaButtonEventHandler;
-    }
-
-    private ComponentName getMediaButtonEventReceiverComponent() {
-        if (mMediaButtonEventReceiverComponent == null) {
-            mMediaButtonEventReceiverComponent =
-                    new ComponentName(mContext, MediaButtonEventReceiver.class);
-        }
-        return mMediaButtonEventReceiverComponent;
-    }
-
-    public void addPlayerListener(@Nullable PlayerListener listener) {
-        if (listener != null) {
-            if (mListeners == null) {
-                mListeners = new ListenerSet<>();
-            }
-            mListeners.add(listener);
-        }
-    }
-
-    public void removePlayerListener(@Nullable PlayerListener listener) {
-        if (listener != null && mListeners != null) {
-            mListeners.remove(listener);
-        }
-    }
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        mContext = getApplicationContext();
-        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
-        sInstance = this;
-    }
-
-    @Nullable
-    @Override
-    public IBinder onBind(Intent intent) {
-        return null;
-    }
-
-    @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        mRunning = true;
-        String action = intent.getAction();
-        switch (action) {
-            case Constants.Actions.START:
-            case Constants.Actions.START_FOREGROUND:
-                Bundle bundle = intent.getExtras();
-                if (bundle != null) {
-                    String playlistId = bundle.getString(Constants.Extras.PLAYLIST_ID);
-                    String videoId = bundle.getString(Constants.Extras.VIDEO_ID);
-                    int videoIndex = bundle.getInt(Constants.Extras.VIDEO_INDEX);
-                    long videoStartMs = bundle.getLong(Constants.Extras.VIDEO_START_MS);
-                    boolean fromPlaybackView = bundle.getBoolean(Constants.Extras.FROM_PLAYBACK_VIEW);
-                    if (action.equals(Constants.Actions.START_FOREGROUND)) {
-                        NOTIFICATION_EXECUTOR.execute(() -> {
-                            Notification notification =
-                                    createNotification(videoId, SystemClock.elapsedRealtime(), false);
-                            Executors.MAIN_EXECUTOR.execute(() -> {
-                                if (mRunning) {
-                                    startForeground(ID_NOTIFICATION, notification);
-                                }
-                            });
-                        });
-                    }
-                    startPlayback(playlistId, videoId, videoIndex, videoStartMs, fromPlaybackView);
-                }
-                break;
-            case Constants.Actions.STOP_SELF:
-                stop();
-                break;
-            case Constants.Actions.PLAY_PAUSE:
-                onTapPlayPause();
-                break;
-            case Constants.Actions.NEXT:
-                onTapSkipNext();
-                break;
-            case Constants.Actions.PREV:
-                onTapSkipPrevious();
-                break;
-        }
-        return START_NOT_STICKY;
-    }
-
-    @Synthetic void onTapPlayPause() {
-        if (mPlayer == null) {
-            return;
-        }
-        switch (mPlayingStatus) {
-            case Youtube.PlayingStatus.UNSTARTED:
-            case Youtube.PlayingStatus.VIDEO_CUED:
-            case Youtube.PlayingStatus.PAUSED:
-                mPlayer.play();
-                break;
-            case Youtube.PlayingStatus.ENDED:
-                if (mReplayVideo) {
-                    mPlayer.play();
-                } else if (mReplayPlaylist) {
-                    mPlayer.replayPlaylist();
-                }
-                mReplayPlaylist = mReplayVideo = false;
-                break;
-            case Youtube.PlayingStatus.BUFFERRING:
-            case Youtube.PlayingStatus.PLAYING:
-                mPlayer.pause();
-                break;
-        }
-    }
-
-    @Synthetic void onTapSkipNext() {
-        if (mPlayer == null) {
-            return;
-        }
-        if (mLinkType == Constants.LinkType.SINGLES) {
-            mPlayer.seekToDefault();
-        } else {
-            mPlayer.next();
-        }
-    }
-
-    @Synthetic void onTapSkipPrevious() {
-        if (mPlayer == null) {
-            return;
-        }
-        if (mLinkType == Constants.LinkType.SINGLES) {
-            mPlayer.seekToDefault();
-        } else {
-            mPlayer.prev();
-        }
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        mRunning = false;
-        sInstance = null;
-        if (mHeadsetEventsReceiver != null) {
-            mHeadsetEventsReceiver.unregister();
-            mHeadsetEventsReceiver = null;
-        }
-        if (mPlayer != null) {
-            mPlayer.stop();
-            mPlayer = null;
-            mPlayerReady = false;
-        }
-        if (mView != null) {
-            mView.destroy();
-        }
-        if (YoutubePlaybackActivity.get() != null) {
-            YoutubePlaybackActivity.get().finish();
-        }
-    }
-
-    @Override
-    public void onTaskRemoved(Intent rootIntent) {
-        super.onTaskRemoved(rootIntent);
-        // Stops when user removes the task holding YoutubePlaybackActivity from the Recents,
-        // or closes that Activity in PiP through the 'Close' button, etc.
-        if (rootIntent != null
-                && rootIntent.getComponent().getShortClassName()
-                        .equals(YoutubePlaybackActivity.class.getName().replace(getPackageName(), ""))) {
-            stop();
-        }
-    }
-
-    public void stop() {
-        mRunning = false;
-        stopForeground(true);
-        stopSelf();
-    }
-
-    public static boolean startPlaybackIfUrlIsWatchUrl(@NonNull Context context, @NonNull String url) {
-        return startPlaybackIfUrlIsWatchUrl(context, url, false);
-    }
-
-    public static boolean startPlaybackIfUrlIsWatchUrl(
-            @NonNull Context context, @NonNull String url, boolean fromPlaybackView) {
-        String videoId;
-        String playlistId;
-        int videoIndex;
-        long videoStartMs;
-
-        if (Youtube.REGEX_WATCH_URL.matches(url)) {
-            videoId = Youtube.Util.getVideoIdFromWatchUrl(url);
-        } else if (Youtube.REGEX_SHARE_URL.matches(url)) {
-            videoId = Youtube.Util.getVideoIdFromShareUrl(url);
-        } else {
-            return false;
-        }
-        playlistId = Youtube.Util.getPlaylistIdFromWatchOrShareUrl(url);
-        videoIndex = Youtube.Util.getVideoIndexFromWatchOrShareUrl(url);
-        videoStartMs = Youtube.Util.getVideoStartMsFromWatchOrShareUrl(url);
-
-        startPlayback(context, playlistId, videoId, videoIndex, videoStartMs, fromPlaybackView);
-        return true;
-    }
-
-    public static void startPlayback(
-            @NonNull Context context,
-            @Nullable String playlistId, @Nullable String videoId, long videoStartMs,
-            boolean fromPlaybackView) {
-        startPlayback(context, playlistId, videoId, Constants.UNKNOWN, videoStartMs, fromPlaybackView);
-    }
-
-    public static void startPlayback(
-            @NonNull Context context,
-            @Nullable String playlistId, @Nullable String videoId, int videoIndex, long videoStartMs,
-            boolean fromPlaybackView) {
-        Intent intent = new Intent(context, YoutubePlaybackService.class);
-        intent.putExtra(Constants.Extras.PLAYLIST_ID, playlistId);
-        intent.putExtra(Constants.Extras.VIDEO_ID, videoId);
-        intent.putExtra(Constants.Extras.VIDEO_INDEX, videoIndex);
-        intent.putExtra(Constants.Extras.VIDEO_START_MS, videoStartMs);
-        intent.putExtra(Constants.Extras.FROM_PLAYBACK_VIEW, fromPlaybackView);
-        intent.setAction(
-                Utils.isServiceRunning(context, YoutubePlaybackService.class) ?
-                        Constants.Actions.START : Constants.Actions.START_FOREGROUND);
-        context.startService(intent);
-    }
-
-    private void startPlayback(
-            @Nullable String playlistId, @Nullable String videoId, int videoIndex, long videoStartMs,
-            boolean fromPlaybackView) {
-        if (playlistId == null) {
-            playlistId = "";
-        }
-        if (videoId == null) {
-            videoId = "";
-        }
-        if (videoIndex == Constants.UNKNOWN && videoId.isEmpty()) {
-            videoIndex = 0;
-        }
-
-        boolean playerChanged;
-        boolean videoIdChanged = !videoId.equals(mVideoId);
-
-        if (mView == null) {
-            mView = new YoutubePlaybackView(this);
-        }
-        WebPlayer oldPlayer = mPlayer;
-        mPlayer = YoutubePlayerFactory.obtain(mView);
-        playerChanged = mPlayer != oldPlayer;
-        if (playerChanged) {
-            mView.setWebPlayer(mPlayer);
-            mPlayerReady = false;
-        }
-
-        if (playerChanged || (!playlistId.equals(mPlaylistId) || videoIdChanged)) {
-            mSeekOnPlayerReady = Constants.UNKNOWN;
-            mReplayPlaylist = mReplayVideo = false;
-            if (Youtube.Prefs.get(mContext).retainHistoryVideoPages()) {
-                // We need a new page if the history video pages in the backstack are required
-                // by the user to be still held on to, so set mPlayerReady to false and use
-                // the view to load the video/playlist down below.
-                mPlayerReady = false;
-            }
-            if (playlistId.isEmpty()) {
-                mLinkType = Constants.LinkType.SINGLES;
-                mVideoId = videoId;
-                mPlaylistId = "";
-                mPlaylistSize = 1;
-                mPlaylistIndex = 0;
-                if (mPlayerReady) {
-                    mPlayer.loadVideo(videoId, videoStartMs);
-                } else {
-                    mView.loadVideo(videoId, videoStartMs);
-                }
-            } else {
-                mLinkType = Constants.LinkType.PLAYLIST;
-                mVideoId = videoId;
-                mPlaylistId = playlistId;
-                mPlaylistSize = Constants.UNKNOWN;
-                mPlaylistIndex = videoIndex;
-                if (mPlayerReady && mPlayer instanceof YoutubePlayer) {
-                    mPlayer.loadPlaylist(playlistId, videoId, videoIndex, videoStartMs);
-                } else {
-                    if (mPlayerReady && videoIndex != Constants.UNKNOWN) {
-                        mPlayer.loadPlaylist(playlistId, videoId, videoIndex, videoStartMs);
-                    } else {
-                        mPlayerReady = false;
-                        mView.loadPlaylist(playlistId, videoId, videoIndex, videoStartMs);
-                    }
-                }
-            }
-        } else {
-            if (mPlayerReady) {
-                videoSeekTo(videoStartMs);
-            } else {
-                mSeekOnPlayerReady = videoStartMs;
-            }
-        }
-        if (playerChanged || !fromPlaybackView) {
-            YoutubePlaybackActivity ytPlaybackActivity = YoutubePlaybackActivity.get();
-            // Have the video view exit fullscreen first, to avoid it going fullscreen automatically
-            // after it exits from PiP to the default display mode.
-            if (ytPlaybackActivity != null && ytPlaybackActivity.isInPictureInPictureMode()) {
-                mView.exitFullscreen();
-            }
-            if (playerChanged) {
-                mView.addPageListener(new AndroidWebView.PageListener() {
-                    @Override
-                    public void onPageStarted(
-                            @NonNull WebView view, @NonNull String url, @Nullable Bitmap favicon) {
-                        // Clear history pages that used a different player
-                        // XXX: We prefer to retain the history so that WebView can go back later
-                        //      and resume them with the current player.
-                        view.clearHistory();
-                        mView.removePageListener(this);
-                    }
-                });
-                if (ytPlaybackActivity != null) {
-                    ActivityCompat.recreate(ytPlaybackActivity);
-                }
-            }
-            playInForeground();
-        }
-        if (videoIdChanged) {
-            Video video = new Video();
-            video.setId(videoId);
-            refreshNotificationForVideo(video);
-        }
-    }
-
-    public void playInForeground() {
-        Intent fullscreenIntent = new Intent(mContext, YoutubePlaybackActivity.class);
-        fullscreenIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(fullscreenIntent);
-    }
-
-    private void videoSeekTo(long videoStartMs) {
-        if (mPlayer != null) {
-            if (videoStartMs == Constants.TIME_UNSET) {
-                mPlayer.seekToDefault();
-            } else {
-                mPlayer.seekTo(videoStartMs);
-            }
-        }
-    }
-
-    /*package*/ void onGetPlaylistInfo(Playlist playlist) {
-        if (playlist != null) {
-            String[] videoIds = playlist.getVideoIds();
-            mPlaylistSize = videoIds != null ? videoIds.length : 0;
-            mPlaylistIndex = playlist.getVideoIndex();
-        }
-    }
-
-    @Override
-    public void onPlayerReady() {
-        if (mPlayer == null) {
-            return;
-        }
-        mPlayerReady = true;
-        if (mSeekOnPlayerReady != Constants.UNKNOWN) {
-            videoSeekTo(mSeekOnPlayerReady);
-            mSeekOnPlayerReady = Constants.UNKNOWN;
-        }
-        if (mHeadsetEventsReceiver == null) {
-            mHeadsetEventsReceiver = new HeadsetEventsReceiver(mContext) {
-                @Override
-                public void onHeadsetPluggedOutOrBluetoothDisconnected() {
-                    if (mPlayer != null) {
-                        mPlayer.pause();
-                    }
-                }
-            };
-            mHeadsetEventsReceiver.register(AudioManager.ACTION_AUDIO_BECOMING_NOISY);
-        }
-        if (mListeners != null) {
-            mListeners.forEach(PlayerListener::onPlayerReady);
-        }
-    }
-
-    @SuppressLint("SwitchIntDef")
-    @Override
-    public void onPlayerStateChange(@Youtube.PlayingStatus int playingStatus) {
-        if (mPlayer == null) {
-            return;
-        }
-        switch (playingStatus) {
-            case Youtube.PlayingStatus.PLAYING:
-                mPlayPauseBtnImgSrc = R.drawable.ic_pause_white_24dp;
-                mPlayPauseBtnContentDesc = R.string.pause;
-//                if (mLinkType == Constants.LinkType.PLAYLIST) {
-//                    mPlayer.requestGetPlaylistInfo();
-//                }
-
-                mPlayer.skipAd();
-                mPlayer.setMuted(false);
-
-                // Register MediaButtonEventReceiver every time the video starts, which
-                // will ensure it to be the sole receiver of MEDIA_BUTTON intents
-                MediaButtonEventReceiver.setMediaButtonEventHandler(getMediaButtonEventHandler());
-                AudioManagerCompat.registerMediaButtonEventReceiver(
-                        mContext, mAudioManager, getMediaButtonEventReceiverComponent());
-                break;
-            case Youtube.PlayingStatus.PAUSED:
-                mPlayPauseBtnImgSrc = R.drawable.ic_play_white_24dp;
-                mPlayPauseBtnContentDesc = R.string.play;
-                break;
-            case Youtube.PlayingStatus.ENDED:
-                if (mLinkType == Constants.LinkType.PLAYLIST) {
-                    switch (Settings.getRepeatMode()) {
-                        case Constants.RepeatMode.SINGLE:
-                            mPlayer.prev();
-                            break;
-                        // If not repeating then set notification icon to repeat when playlist ends
-                        case Constants.RepeatMode.NONE:
-                            mReplayPlaylist = true;
-                            mPlayPauseBtnImgSrc = R.drawable.ic_replay_white_24dp;
-                            mPlayPauseBtnContentDesc = R.string.replay;
-                            break;
-                    }
-                } else {
-                    if (Settings.getRepeatMode() != Constants.RepeatMode.NONE) {
-                        mPlayer.play();
-                    } else {
-                        if (Settings.shouldFinishServiceOnPlaylistEnded()) {
-                            stop();
-                            return;
-                        } else {
-                            mReplayVideo = true;
-                            mPlayPauseBtnImgSrc = R.drawable.ic_replay_white_24dp;
-                            mPlayPauseBtnContentDesc = R.string.replay;
-                        }
-                    }
-                }
-                break;
-        }
-        mLastPlayingStatus = mPlayingStatus;
-        mPlayingStatus = playingStatus;
-        mPlayer.requestGetVideoInfo(true);
-        if (mListeners != null) {
-            mListeners.forEach(listener -> listener.onPlayerStateChange(playingStatus));
-        }
-    }
-
-    /*package*/ void onGetVideoInfo(Video video, boolean refreshNotification) {
-        if (refreshNotification) {
-            if (video == null) {
-                video = EMPTY_VIDEO;
-            }
-            refreshNotificationForVideo(video);
-        }
-    }
-
-    private void refreshNotificationForVideo(Video video) {
-        boolean changed = mLastPlayingStatus != mPlayingStatus
-                || mVideo.getDuration() != video.getDuration()
-                || mVideo.getCurrentPosition() != video.getCurrentPosition();
-        recacheVideoInfo(video);
-        if (!mNotiVideoId.equals(mVideoId)) {
-            mNotiVideoId = mVideoId;
-            changed = true;
-        }
-        if (changed) {
-            refreshNotification(true);
-        }
-    }
-
-    private void recacheVideoInfo(Video video) {
-        String lastVideoId = mVideo.getId();
-        mLastPlayingStatus = mPlayingStatus;
-        mVideo = video;
-        // Video id may not currently available from the player, so we need to verify if we can
-        // modify the mVideoId, as the played video can be changed directly through the web player,
-        // like prev() and next() of the YoutubeIFramePlayer.
-        if (!TextUtils.isEmpty(video.getId()) || emptyIfStringNull(lastVideoId).equals(mVideoId)) {
-            mVideoId = emptyIfStringNull(video.getId());
-        }
-    }
-
-    public void refreshNotification() {
-        refreshNotification(true);
-    }
-
-    private void refreshNotification(boolean showVideoInfo) {
-        long elapsedTime = SystemClock.elapsedRealtime();
-        NOTIFICATION_EXECUTOR.execute(() -> {
-            NotificationManager notificationManager =
-                    (NotificationManager) mContext.getSystemService(NOTIFICATION_SERVICE);
-            Notification notification = createNotification(mVideoId, elapsedTime, showVideoInfo);
-            Executors.MAIN_EXECUTOR.execute(() -> {
-                if (mRunning) {
-                    notificationManager.notify(ID_NOTIFICATION, notification);
-                }
-            });
-        });
-    }
-
-    private Notification createNotification(String videoId, long elapsedTime, boolean loadInfo) {
-        if (!mRunning) return null;
-
-        NotificationCompat.Builder builder = new NotificationCompat.Builder(
-                this, NotificationChannelManager.getPlaybackControlNotificationChannelId(mContext));
-
-        String pkgName = mContext.getPackageName();
-        RemoteViews viewBig = new RemoteViews(pkgName, R.layout.web_player_notification_view_large);
-        RemoteViews viewSmall = new RemoteViews(pkgName, R.layout.web_player_notification_view_small);
-
-        Bitmap[] thumb = new Bitmap[1];
-        String[] title_author = new String[2];
-        CountDownLatch[] latch = new CountDownLatch[1];
-
-        if (loadInfo && !TextUtils.isEmpty(videoId)) {
-            latch[0] = new CountDownLatch(2);
-            Executors.MAIN_EXECUTOR.execute(() -> {
-                Executor workerExecutor = Executors.THREAD_POOL_EXECUTOR;
-                InternetResourceLoadTask.ofBitmap("https://i.ytimg.com/vi/" + videoId + "/mqdefault.jpg")
-                        .onResult(new InternetResourceLoadTask.ResultCallback<Bitmap>() {
-                            @Override
-                            public void onCompleted(Bitmap _thumb) {
-                                thumb[0] = _thumb;
-                                latch[0].countDown();
-                            }
-                        }).executeOnExecutor(workerExecutor);
-                InternetResourceLoadTask.ofString(
-                        "https://www.youtube.com/oembed?url=http://www.youtu.be/watch?v="
-                                + videoId + "&format=json")
-                        .onResult(new InternetResourceLoadTask.ResultCallback<String>() {
-                            @Override
-                            public void onCompleted(String details) {
-                                if (details != null) {
-                                    try {
-                                        JSONObject detailsJson = new JSONObject(details);
-                                        title_author[0] = detailsJson.getString("title");
-                                        title_author[1] = detailsJson.getString("author_name");
-                                    } catch (JSONException e) {
-                                        e.printStackTrace();
-                                    }
-                                }
-                                latch[0].countDown();
-                            }
-                        }).executeOnExecutor(workerExecutor);
-            });
-        }
-
-        // Intent to do things
-        Intent doThings = new Intent(mContext, YoutubePlaybackService.class);
-        int iconTint = getNotificationActionIconTint();
-
-        RemoteViewsCompat.setImageViewResourceWithTint(
-                this, viewSmall, R.id.btn_close, R.drawable.ic_close_white_20dp, iconTint);
-        RemoteViewsCompat.setImageViewResourceWithTint(
-                this, viewBig, R.id.btn_close, R.drawable.ic_close_white_20dp, iconTint);
-        // Stop service using doThings Intent
-        viewSmall.setOnClickPendingIntent(
-                R.id.btn_close,
-                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.STOP_SELF)));
-        viewBig.setOnClickPendingIntent(
-                R.id.btn_close,
-                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.STOP_SELF)));
-
-        RemoteViewsCompat.setImageViewResourceWithTint(
-                this, viewBig, R.id.btn_play_pause, mPlayPauseBtnImgSrc, iconTint);
-        RemoteViewsCompat.setContentDescription(
-                viewBig, R.id.btn_play_pause, getText(mPlayPauseBtnContentDesc));
-        // Play, Pause video using doThings Intent
-        viewBig.setOnClickPendingIntent(
-                R.id.btn_play_pause,
-                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.PLAY_PAUSE)));
-
-        RemoteViewsCompat.setImageViewResourceWithTint(
-                this, viewBig, R.id.btn_next, R.drawable.ic_skip_next_white_24dp, iconTint);
-        // Next video using doThings Intent
-        viewBig.setOnClickPendingIntent(
-                R.id.btn_next,
-                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.NEXT)));
-
-        RemoteViewsCompat.setImageViewResourceWithTint(
-                this, viewBig, R.id.btn_previous, R.drawable.ic_skip_previous_white_24dp, iconTint);
-        // Previous video using doThings Intent
-        viewBig.setOnClickPendingIntent(
-                R.id.btn_previous,
-                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.PREV)));
-
-        Intent it = new Intent(mContext, YoutubePlaybackActivity.class)
-                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
-                        | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
-        PendingIntent pit = PendingIntent.getActivity(
-                mContext, 0, it, Consts.PENDING_INTENT_FLAG_IMMUTABLE);
-        builder.setSmallIcon(R.drawable.ic_media_app_notification)
-                .setStyle(new DecoratedMediaCustomViewStyle())
-                .setDefaults(0)
-                .setOnlyAlertOnce(true)
-                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
-                .setCategory(NotificationCompat.CATEGORY_TRANSPORT)
-                .setForegroundServiceBehavior(NotificationCompat.FOREGROUND_SERVICE_IMMEDIATE)
-                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
-                .setOngoing(true)
-                .setCustomContentView(viewSmall)
-                .setCustomBigContentView(viewBig)
-                .setContentIntent(pit)
-                .setAutoCancel(false);
-
-        if (latch[0] != null) {
-            while (latch[0].getCount() > 0) {
-                try {
-                    latch[0].await();
-                } catch (InterruptedException e) {
-                    e.printStackTrace();
-                }
-            }
-
-            Bitmap _thumb = thumb[0];
-            String title = title_author[0];
-            String author = title_author[1];
-            if (_thumb != null) {
-                viewBig.setImageViewBitmap(R.id.image_thumbnail, _thumb);
-                viewSmall.setImageViewBitmap(R.id.image_thumbnail, _thumb);
-            }
-            if (title != null) {
-                builder.setTicker(title);
-                viewBig.setTextViewText(R.id.text_title, title);
-                viewSmall.setTextViewText(R.id.text_title, title);
-            }
-            if (author != null) {
-                viewBig.setTextViewText(R.id.text_author, author);
-                viewSmall.setTextViewText(R.id.text_author, author);
-            }
-        }
-
-        // Chronometer
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            if (loadInfo) {
-                long endTime = elapsedTime + (mVideo.getDuration() - mVideo.getCurrentPosition());
-                if (endTime > SystemClock.elapsedRealtime()) {
-                    viewBig.setLong(R.id.countdownChronometer, "setBase", endTime);
-                    viewBig.setBoolean(R.id.countdownChronometer,
-                            "setStarted", mPlayingStatus == Youtube.PlayingStatus.PLAYING);
-                }
-            }
-        } else {
-            viewBig.setViewVisibility(R.id.countdownChronometer, View.GONE);
-        }
-
-        return builder.build();
-    }
-
-    private PendingIntent getNotificationActionPendingIntent(Intent intent) {
-        return PendingIntent.getService(mContext, 0, intent, Consts.PENDING_INTENT_FLAG_IMMUTABLE);
-    }
-
-    /**
-     * Gets the notification action icon tint relying on the current theme. Do NOT cache statically!
-     */
-    private int getNotificationActionIconTint() {
-        // MUST use the application Context to retrieve the default text color of the below
-        // TextAppearance used by the system UI, whose night mode the application Context will
-        // always keep in sync with.
-        return ThemeUtils.getTextAppearanceDefaultTextColor(
-                mContext, R.style.TextAppearance_Compat_Notification_Media);
-    }
-
-    private static final class MsgHandler extends Handler {
-        MsgHandler() {
-            super(Looper.getMainLooper());
-        }
-
-        @Override
-        public void handleMessage(@NonNull Message msg) {
-            YoutubePlaybackService service = YoutubePlaybackService.get();
-            if (service == null) return;
-
-            switch (msg.what) {
-                case MediaButtonEventHandler.MSG_PLAY_PAUSE_KEY_SINGLE_TAP:
-                    service.onTapPlayPause();
-                    break;
-                // Consider double tap as the next.
-                case MediaButtonEventHandler.MSG_PLAY_PAUSE_KEY_DOUBLE_TAP:
-                case MediaButtonEventHandler.MSG_MEDIA_NEXT:
-                    service.onTapSkipNext();
-                    break;
-                // Consider triple tap as the previous.
-                case MediaButtonEventHandler.MSG_PLAY_PAUSE_KEY_TRIPLE_TAP:
-                case MediaButtonEventHandler.MSG_MEDIA_PREVIOUS:
-                    service.onTapSkipPrevious();
-                    break;
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.kt b/web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.kt
new file mode 100644
index 0000000..1cb1595
--- /dev/null
+++ b/web/src/main/java/com/liuzhenlin/videos/web/youtube/YoutubePlaybackService.kt
@@ -0,0 +1,791 @@
+/*
+ * Created on 2022-2-18 5:54:39 PM.
+ * Copyright © 2022 刘振林. All rights reserved.
+ */
+package com.liuzhenlin.videos.web.youtube
+
+import android.annotation.SuppressLint
+import android.app.Notification
+import android.app.NotificationManager
+import android.app.PendingIntent
+import android.app.Service
+import android.content.ComponentName
+import android.content.Context
+import android.content.Intent
+import android.graphics.Bitmap
+import android.media.AudioManager
+import android.os.Build
+import android.os.Handler
+import android.os.IBinder
+import android.os.Looper
+import android.os.Message
+import android.os.Messenger
+import android.os.SystemClock
+import android.text.TextUtils
+import android.view.View
+import android.webkit.WebView
+import android.widget.RemoteViews
+import androidx.core.app.ActivityCompat
+import androidx.core.app.NotificationCompat
+import androidx.core.util.Consumer
+import com.liuzhenlin.common.Consts
+import com.liuzhenlin.common.compat.AudioManagerCompat
+import com.liuzhenlin.common.compat.RemoteViewsCompat
+import com.liuzhenlin.common.notification.style.DecoratedMediaCustomViewStyle
+import com.liuzhenlin.common.receiver.HeadsetEventsReceiver
+import com.liuzhenlin.common.receiver.MediaButtonEventHandler
+import com.liuzhenlin.common.receiver.MediaButtonEventReceiver
+import com.liuzhenlin.common.utils.AppScope
+import com.liuzhenlin.common.utils.InternetResourceLoadTask
+import com.liuzhenlin.common.utils.ListenerSet
+import com.liuzhenlin.common.utils.NotificationChannelManager
+import com.liuzhenlin.common.utils.SerialExecutor
+import com.liuzhenlin.common.utils.ThemeUtils
+import com.liuzhenlin.common.utils.Utils
+import com.liuzhenlin.common.utils.executeOnCoroutine
+import com.liuzhenlin.videos.web.AndroidWebView
+import com.liuzhenlin.videos.web.R
+import com.liuzhenlin.videos.web.bean.Playlist
+import com.liuzhenlin.videos.web.bean.Video
+import com.liuzhenlin.videos.web.player.Constants
+import com.liuzhenlin.videos.web.player.PlayerWebView
+import com.liuzhenlin.videos.web.player.Settings
+import com.liuzhenlin.videos.web.player.WebPlayer
+import com.liuzhenlin.videos.web.youtube.Youtube.PlayingStatus
+import kotlinx.coroutines.CoroutineDispatcher
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Deferred
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.asCoroutineDispatcher
+import kotlinx.coroutines.cancel
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.plus
+import kotlinx.coroutines.withContext
+import org.json.JSONException
+import org.json.JSONObject
+import kotlin.concurrent.Volatile
+
+class YoutubePlaybackService : Service(), PlayerListener {
+
+    private var mCoroutineScope: CoroutineScope? = null
+
+    @JvmField
+    protected var mView: PlayerWebView? = null
+
+    public var webPlayer: WebPlayer? = null
+        private set
+
+    @JvmField
+    protected var mPlayerReady: Boolean = false
+
+    private var mSeekOnPlayerReady: Long = Constants.UNKNOWN.toLong()
+
+    private var mNotiVideoId = ""
+    private var mVideoId = ""
+    private var mPlaylistId = ""
+
+    private var mLinkType = 0
+
+    private var mPlaylistSize = 0
+    private var mPlaylistIndex = 0
+
+    @Volatile private var mVideo: Video? = EMPTY_VIDEO
+
+    @PlayingStatus
+    @JvmField
+    @Volatile protected var mPlayingStatus: Int = PlayingStatus.UNSTARTED
+    private var mLastPlayingStatus = mPlayingStatus
+
+    private var mReplayVideo = false
+    private var mReplayPlaylist = false
+
+    @Volatile private var mPlayPauseBtnImgSrc = R.drawable.ic_pause_white_24dp
+    @Volatile private var mPlayPauseBtnContentDesc = R.string.pause
+
+    private var mAudioManager: AudioManager? = null
+    private var mHeadsetEventsReceiver: HeadsetEventsReceiver? = null
+    private val mMediaButtonEventHandler: MediaButtonEventHandler by lazy(LazyThreadSafetyMode.NONE) {
+        MediaButtonEventHandler(Messenger(MsgHandler()))
+    }
+    private var mMediaButtonEventReceiverComponent: ComponentName? = null
+        get() {
+            if (field == null) {
+                field = ComponentName(applicationContext, MediaButtonEventReceiver::class.java)
+            }
+            return field
+        }
+
+    private var mListeners: ListenerSet<PlayerListener>? = null
+
+    val isPlaying: Boolean
+        get() {
+            val status = mPlayingStatus
+            return (status == PlayingStatus.PLAYING || status == PlayingStatus.BUFFERRING)
+        }
+
+    fun addPlayerListener(listener: PlayerListener?) {
+        if (listener != null) {
+            if (mListeners == null) {
+                mListeners = ListenerSet()
+            }
+            mListeners?.add(listener)
+        }
+    }
+
+    fun removePlayerListener(listener: PlayerListener?) {
+        if (listener != null) {
+            mListeners?.remove(listener)
+        }
+    }
+
+    override fun onCreate() {
+        super.onCreate()
+        applicationContext.let {
+            mAudioManager = it.getSystemService(AUDIO_SERVICE) as AudioManager
+            mCoroutineScope = AppScope + SupervisorJob()
+        }
+        sInstance = this
+    }
+
+    override fun onBind(intent: Intent): IBinder? {
+        return null
+    }
+
+    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
+        val action = intent.action
+        when (action) {
+            Constants.Actions.START, Constants.Actions.START_FOREGROUND -> {
+                val bundle = intent.extras
+                if (bundle != null) {
+                    val playlistId = bundle.getString(Constants.Extras.PLAYLIST_ID)
+                    val videoId = bundle.getString(Constants.Extras.VIDEO_ID)
+                    val videoIndex = bundle.getInt(Constants.Extras.VIDEO_INDEX)
+                    val videoStartMs = bundle.getLong(Constants.Extras.VIDEO_START_MS)
+                    val fromPlaybackView = bundle.getBoolean(Constants.Extras.FROM_PLAYBACK_VIEW)
+                    if (action == Constants.Actions.START_FOREGROUND) {
+                        mCoroutineScope?.launch(NotificationDispatcher) {
+                            val notification =
+                                    createNotification(videoId, SystemClock.elapsedRealtime(), false)
+                            withContext(Dispatchers.Main) {
+                                startForeground(ID_NOTIFICATION, notification)
+                            }
+                        }
+                    }
+                    startPlayback(playlistId, videoId, videoIndex, videoStartMs, fromPlaybackView)
+                }
+            }
+            Constants.Actions.STOP_SELF -> stop()
+            Constants.Actions.PLAY_PAUSE -> onTapPlayPause()
+            Constants.Actions.NEXT -> onTapSkipNext()
+            Constants.Actions.PREV -> onTapSkipPrevious()
+        }
+        return START_NOT_STICKY
+    }
+
+    private fun onTapPlayPause() {
+        webPlayer?.let {
+            when (mPlayingStatus) {
+                PlayingStatus.UNSTARTED, PlayingStatus.VIDEO_CUED, PlayingStatus.PAUSED -> it.play()
+                PlayingStatus.ENDED -> {
+                    if (mReplayVideo) {
+                        it.play()
+                    } else if (mReplayPlaylist) {
+                        it.replayPlaylist()
+                    }
+                    mReplayVideo = false
+                    mReplayPlaylist = false
+                }
+                PlayingStatus.BUFFERRING, PlayingStatus.PLAYING -> it.pause()
+            }
+        }
+    }
+
+    private fun onTapSkipNext() {
+        webPlayer?.let {
+            if (mLinkType == Constants.LinkType.SINGLES) {
+                it.seekToDefault()
+            } else {
+                it.next()
+            }
+        }
+    }
+
+    private fun onTapSkipPrevious() {
+        webPlayer?.let {
+            if (mLinkType == Constants.LinkType.SINGLES) {
+                it.seekToDefault()
+            } else {
+                it.prev()
+            }
+        }
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        mCoroutineScope?.let {
+            it.cancel()
+            mCoroutineScope = null
+        }
+        sInstance = null
+        mHeadsetEventsReceiver?.let {
+            it.unregister()
+            mHeadsetEventsReceiver = null
+        }
+        webPlayer?.let {
+            it.stop()
+            webPlayer = null
+            mPlayerReady = false
+        }
+        mView?.destroy()
+        YoutubePlaybackActivity.get()?.finish()
+    }
+
+    override fun onTaskRemoved(rootIntent: Intent?) {
+        super.onTaskRemoved(rootIntent)
+        // Stops when user removes the task holding YoutubePlaybackActivity from the Recents,
+        // or closes that Activity in PiP through the 'Close' button, etc.
+        if (rootIntent != null
+                && (rootIntent.component?.shortClassName
+                        == YoutubePlaybackActivity::class.java.name.replace(packageName, ""))) {
+            stop()
+        }
+    }
+
+    fun stop() {
+        mCoroutineScope?.cancel()
+        mCoroutineScope = null
+        stopForeground(true)
+        stopSelf()
+    }
+
+    private fun startPlayback(
+        playlistId: String?, videoId: String?, videoIndex: Int, videoStartMs: Long,
+        fromPlaybackView: Boolean
+    ) {
+        var playlistId = playlistId
+        var videoId = videoId
+        var videoIndex = videoIndex
+        if (playlistId == null) {
+            playlistId = ""
+        }
+        if (videoId == null) {
+            videoId = ""
+        }
+        if (videoIndex == Constants.UNKNOWN && videoId.isEmpty()) {
+            videoIndex = 0
+        }
+
+        val playerChanged: Boolean
+        val videoIdChanged = videoId != mVideoId
+
+        var view = mView
+        if (view == null) {
+            view = YoutubePlaybackView(this)
+            mView = view
+        }
+        val oldPlayer = webPlayer
+        val player = YoutubePlayerFactory.obtain(view)
+        webPlayer = player
+        playerChanged = player !== oldPlayer
+        if (playerChanged) {
+            view.webPlayer = player
+            mPlayerReady = false
+        }
+
+        if (playerChanged || (playlistId != mPlaylistId || videoIdChanged)) {
+            mSeekOnPlayerReady = Constants.UNKNOWN.toLong()
+            mReplayVideo = false
+            mReplayPlaylist = false
+            if (Youtube.Prefs.get(applicationContext).retainHistoryVideoPages()) {
+                // We need a new page if the history video pages in the backstack are required
+                // by the user to be still held on to, so set mPlayerReady to false and use
+                // the view to load the video/playlist down below.
+                mPlayerReady = false
+            }
+            if (playlistId.isEmpty()) {
+                mLinkType = Constants.LinkType.SINGLES
+                mVideoId = videoId
+                mPlaylistId = ""
+                mPlaylistSize = 1
+                mPlaylistIndex = 0
+                if (mPlayerReady) {
+                    player.loadVideo(videoId, videoStartMs)
+                } else {
+                    view.loadVideo(videoId, videoStartMs)
+                }
+            } else {
+                mLinkType = Constants.LinkType.PLAYLIST
+                mVideoId = videoId
+                mPlaylistId = playlistId
+                mPlaylistSize = Constants.UNKNOWN
+                mPlaylistIndex = videoIndex
+                if (mPlayerReady && player is YoutubePlayer) {
+                    player.loadPlaylist(playlistId, videoId, videoIndex, videoStartMs)
+                } else {
+                    if (mPlayerReady && videoIndex != Constants.UNKNOWN) {
+                        player.loadPlaylist(playlistId, videoId, videoIndex, videoStartMs)
+                    } else {
+                        mPlayerReady = false
+                        view.loadPlaylist(playlistId, videoId, videoIndex, videoStartMs)
+                    }
+                }
+            }
+        } else {
+            if (mPlayerReady) {
+                videoSeekTo(videoStartMs)
+            } else {
+                mSeekOnPlayerReady = videoStartMs
+            }
+        }
+        if (playerChanged || !fromPlaybackView) {
+            val ytPlaybackActivity = YoutubePlaybackActivity.get()
+            // Have the video view exit fullscreen first, to avoid it going fullscreen automatically
+            // after it exits from PiP to the default display mode.
+            if (ytPlaybackActivity != null && ytPlaybackActivity.isInPictureInPictureMode) {
+                view.exitFullscreen()
+            }
+            if (playerChanged) {
+                view.addPageListener(object : AndroidWebView.PageListener {
+                    override fun onPageStarted(view: WebView, url: String, favicon: Bitmap?) {
+                        // Clear history pages that used a different player
+                        // XXX: We prefer to retain the history so that WebView can go back later
+                        //      and resume them with the current player.
+                        view.clearHistory()
+                        (view as YoutubePlaybackView).removePageListener(this)
+                    }
+                })
+                if (ytPlaybackActivity != null) {
+                    ActivityCompat.recreate(ytPlaybackActivity)
+                }
+            }
+            playInForeground()
+        }
+        if (videoIdChanged) {
+            val video = Video()
+            video.id = videoId
+            refreshNotificationForVideo(video)
+        }
+    }
+
+    fun playInForeground() {
+        applicationContext.let {
+            val fullscreenIntent = Intent(it, YoutubePlaybackActivity::class.java)
+            fullscreenIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+            it.startActivity(fullscreenIntent)
+        }
+    }
+
+    private fun videoSeekTo(videoStartMs: Long) {
+        webPlayer?.let {
+            if (videoStartMs == Constants.TIME_UNSET) {
+                it.seekToDefault()
+            } else {
+                it.seekTo(videoStartMs)
+            }
+        }
+    }
+
+    protected fun onGetPlaylistInfo(playlist: Playlist?) {
+        if (playlist != null) {
+            val videoIds = playlist.videoIds
+            mPlaylistSize = videoIds?.size ?: 0
+            mPlaylistIndex = playlist.videoIndex
+        }
+    }
+
+    override fun onPlayerReady() {
+        webPlayer?.let { player ->
+            mPlayerReady = true
+            if (mSeekOnPlayerReady != Constants.UNKNOWN.toLong()) {
+                videoSeekTo(mSeekOnPlayerReady)
+                mSeekOnPlayerReady = Constants.UNKNOWN.toLong()
+            }
+            if (mHeadsetEventsReceiver == null) {
+                mHeadsetEventsReceiver = object : HeadsetEventsReceiver(applicationContext) {
+                    public override fun onHeadsetPluggedOutOrBluetoothDisconnected() {
+                        player.pause()
+                    }
+                }
+                mHeadsetEventsReceiver?.register(AudioManager.ACTION_AUDIO_BECOMING_NOISY)
+            }
+            mListeners?.forEach { listener -> listener.onPlayerReady() }
+        }
+    }
+
+    @SuppressLint("SwitchIntDef")
+    override fun onPlayerStateChange(@PlayingStatus playingStatus: Int) {
+        webPlayer?.let { player ->
+            when (playingStatus) {
+                PlayingStatus.PLAYING -> {
+                    mPlayPauseBtnImgSrc = R.drawable.ic_pause_white_24dp
+                    mPlayPauseBtnContentDesc = R.string.pause
+//                    if (mLinkType == Constants.LinkType.PLAYLIST) {
+//                        it.requestGetPlaylistInfo();
+//                    }
+
+                    player.skipAd()
+                    player.setMuted(false)
+
+                    // Register MediaButtonEventReceiver every time the video starts, which
+                    // will ensure it to be the sole receiver of MEDIA_BUTTON intents
+                    MediaButtonEventReceiver.setMediaButtonEventHandler(mMediaButtonEventHandler)
+                    mAudioManager?.let {
+                        AudioManagerCompat.registerMediaButtonEventReceiver(
+                                applicationContext, it, mMediaButtonEventReceiverComponent)
+                    }
+                }
+
+                PlayingStatus.PAUSED -> {
+                    mPlayPauseBtnImgSrc = R.drawable.ic_play_white_24dp
+                    mPlayPauseBtnContentDesc = R.string.play
+                }
+
+                PlayingStatus.ENDED ->
+                    if (mLinkType == Constants.LinkType.PLAYLIST) {
+                        when (Settings.getRepeatMode()) {
+                            Constants.RepeatMode.SINGLE -> player.prev()
+                            Constants.RepeatMode.NONE -> {
+                                mReplayPlaylist = true
+                                mPlayPauseBtnImgSrc = R.drawable.ic_replay_white_24dp
+                                mPlayPauseBtnContentDesc = R.string.replay
+                            }
+                        }
+                    } else {
+                        if (Settings.getRepeatMode() != Constants.RepeatMode.NONE) {
+                            player.play()
+                        } else {
+                            if (Settings.shouldFinishServiceOnPlaylistEnded()) {
+                                stop()
+                                return
+                            } else {
+                                mReplayVideo = true
+                                mPlayPauseBtnImgSrc = R.drawable.ic_replay_white_24dp
+                                mPlayPauseBtnContentDesc = R.string.replay
+                            }
+                        }
+                    }
+            }
+            mLastPlayingStatus = mPlayingStatus
+            mPlayingStatus = playingStatus
+            player.requestGetVideoInfo(true)
+            mListeners?.forEach { listener: PlayerListener ->
+                listener.onPlayerStateChange(playingStatus)
+            }
+        }
+    }
+
+    protected fun onGetVideoInfo(video: Video?, refreshNotification: Boolean) {
+        var video = video
+        if (refreshNotification) {
+            if (video == null) {
+                video = EMPTY_VIDEO
+            }
+            refreshNotificationForVideo(video)
+        }
+    }
+
+    private fun refreshNotificationForVideo(video: Video?) {
+        var changed = mLastPlayingStatus != mPlayingStatus
+                || mVideo?.duration != video?.duration
+                || mVideo?.currentPosition != video?.currentPosition
+        recacheVideoInfo(video)
+        if (mNotiVideoId != mVideoId) {
+            mNotiVideoId = mVideoId
+            changed = true
+        }
+        if (changed) {
+            refreshNotification(true)
+        }
+    }
+
+    private fun recacheVideoInfo(video: Video?) {
+        val lastVideoId = mVideo?.id
+        mLastPlayingStatus = mPlayingStatus
+        mVideo = video
+        // Video id may not currently available from the player, so we need to verify if we can
+        // modify the mVideoId, as the played video can be changed directly through the web player,
+        // like prev() and next() of the YoutubeIFramePlayer.
+        if (!TextUtils.isEmpty(video?.id) || Utils.emptyIfStringNull(lastVideoId) == mVideoId) {
+            mVideoId = Utils.emptyIfStringNull(video?.id)
+        }
+    }
+
+    fun refreshNotification() {
+        refreshNotification(true)
+    }
+
+    private fun refreshNotification(showVideoInfo: Boolean) {
+        val elapsedTime = SystemClock.elapsedRealtime()
+        mCoroutineScope?.launch(NotificationDispatcher) {
+            val notificationManager =
+                    applicationContext.getSystemService(NOTIFICATION_SERVICE) as NotificationManager
+            val notification = createNotification(mVideoId, elapsedTime, showVideoInfo)
+            withContext(Dispatchers.Main) {
+                notificationManager.notify(ID_NOTIFICATION, notification)
+            }
+        }
+    }
+
+    private suspend fun createNotification(videoId: String?, elapsedTime: Long, loadInfo: Boolean)
+            : Notification {
+        val context = applicationContext
+        val builder = NotificationCompat.Builder(
+                this, NotificationChannelManager.getPlaybackControlNotificationChannelId(context))
+
+        val pkgName = context.packageName
+        val viewBig = RemoteViews(pkgName, R.layout.web_player_notification_view_large)
+        val viewSmall = RemoteViews(pkgName, R.layout.web_player_notification_view_small)
+
+        val thumb = arrayOfNulls<Bitmap>(1)
+        val title_author = arrayOfNulls<String>(2)
+
+        var bitmapTask: Deferred<Bitmap?>? = null
+        var jsonTask: Deferred<String?>? = null
+        if (loadInfo && !TextUtils.isEmpty(videoId)) {
+            withContext(Dispatchers.Main) {
+                bitmapTask =
+                    InternetResourceLoadTask.ofBitmap("https://i.ytimg.com/vi/$videoId/mqdefault.jpg")
+                        .onResult(object : InternetResourceLoadTask.ResultCallback<Bitmap?>() {
+                            override fun onCompleted(_thumb: Bitmap?) {
+                                thumb[0] = _thumb
+                            }
+                        }).executeOnCoroutine(this, Dispatchers.IO)
+                jsonTask =
+                    InternetResourceLoadTask.ofString(
+                            "https://www.youtube.com/oembed?url=http://www.youtu.be/watch?v="
+                                    + videoId + "&format=json")
+                        .onResult(object : InternetResourceLoadTask.ResultCallback<String?>() {
+                            override fun onCompleted(details: String?) {
+                                if (details != null) {
+                                    try {
+                                        val detailsJson = JSONObject(details)
+                                        title_author[0] = detailsJson.getString("title")
+                                        title_author[1] = detailsJson.getString("author_name")
+                                    } catch (e: JSONException) {
+                                        e.printStackTrace()
+                                    }
+                                }
+                            }
+                        }).executeOnCoroutine(this, Dispatchers.IO)
+            }
+        }
+
+        // Intent to do things
+        val doThings = Intent(context, YoutubePlaybackService::class.java)
+        val iconTint = notificationActionIconTint
+
+        RemoteViewsCompat.setImageViewResourceWithTint(
+                this, viewSmall, R.id.btn_close, R.drawable.ic_close_white_20dp, iconTint)
+        RemoteViewsCompat.setImageViewResourceWithTint(
+                this, viewBig, R.id.btn_close, R.drawable.ic_close_white_20dp, iconTint)
+        // Stop service using doThings Intent
+        viewSmall.setOnClickPendingIntent(
+                R.id.btn_close,
+                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.STOP_SELF)))
+        viewBig.setOnClickPendingIntent(
+                R.id.btn_close,
+                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.STOP_SELF)))
+
+        RemoteViewsCompat.setImageViewResourceWithTint(
+                this, viewBig, R.id.btn_play_pause, mPlayPauseBtnImgSrc, iconTint)
+        RemoteViewsCompat.setContentDescription(
+                viewBig, R.id.btn_play_pause, getText(mPlayPauseBtnContentDesc))
+        // Play, Pause video using doThings Intent
+        viewBig.setOnClickPendingIntent(
+                R.id.btn_play_pause,
+                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.PLAY_PAUSE)))
+
+        RemoteViewsCompat.setImageViewResourceWithTint(
+                this, viewBig, R.id.btn_next, R.drawable.ic_skip_next_white_24dp, iconTint)
+        // Next video using doThings Intent
+        viewBig.setOnClickPendingIntent(
+                R.id.btn_next,
+                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.NEXT)))
+
+        RemoteViewsCompat.setImageViewResourceWithTint(
+                this, viewBig, R.id.btn_previous, R.drawable.ic_skip_previous_white_24dp, iconTint)
+        // Previous video using doThings Intent
+        viewBig.setOnClickPendingIntent(
+                R.id.btn_previous,
+                getNotificationActionPendingIntent(doThings.setAction(Constants.Actions.PREV)))
+
+        val it = Intent(context, YoutubePlaybackActivity::class.java)
+                .setFlags(
+                        Intent.FLAG_ACTIVITY_NEW_TASK
+                                or Intent.FLAG_ACTIVITY_SINGLE_TOP or Intent.FLAG_ACTIVITY_CLEAR_TOP)
+        val pit = PendingIntent.getActivity(context, 0, it, Consts.PENDING_INTENT_FLAG_IMMUTABLE)
+        builder.setSmallIcon(R.drawable.ic_media_app_notification)
+                .setStyle(DecoratedMediaCustomViewStyle())
+                .setDefaults(0)
+                .setOnlyAlertOnce(true)
+                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
+                .setCategory(NotificationCompat.CATEGORY_TRANSPORT)
+                .setForegroundServiceBehavior(NotificationCompat.FOREGROUND_SERVICE_IMMEDIATE)
+                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
+                .setOngoing(true)
+                .setCustomContentView(viewSmall)
+                .setCustomBigContentView(viewBig)
+                .setContentIntent(pit)
+                .setAutoCancel(false)
+
+        if (bitmapTask != null || jsonTask != null) {
+            bitmapTask?.await()
+            jsonTask?.await()
+
+            val _thumb = thumb[0]
+            val title = title_author[0]
+            val author = title_author[1]
+            if (_thumb != null) {
+                viewBig.setImageViewBitmap(R.id.image_thumbnail, _thumb)
+                viewSmall.setImageViewBitmap(R.id.image_thumbnail, _thumb)
+            }
+            if (title != null) {
+                builder.setTicker(title)
+                viewBig.setTextViewText(R.id.text_title, title)
+                viewSmall.setTextViewText(R.id.text_title, title)
+            }
+            if (author != null) {
+                viewBig.setTextViewText(R.id.text_author, author)
+                viewSmall.setTextViewText(R.id.text_author, author)
+            }
+        }
+
+        // Chronometer
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            if (loadInfo) {
+                mVideo?.let { video ->
+                    val endTime = elapsedTime + (video.duration - video.currentPosition)
+                    if (endTime > SystemClock.elapsedRealtime()) {
+                        viewBig.setLong(R.id.countdownChronometer, "setBase", endTime)
+                        viewBig.setBoolean(R.id.countdownChronometer,
+                                "setStarted", mPlayingStatus == PlayingStatus.PLAYING)
+                    }
+                }
+            }
+        } else {
+            viewBig.setViewVisibility(R.id.countdownChronometer, View.GONE)
+        }
+
+        return builder.build()
+    }
+
+    private fun getNotificationActionPendingIntent(intent: Intent): PendingIntent {
+        return PendingIntent.getService(applicationContext, 0, intent,
+                Consts.PENDING_INTENT_FLAG_IMMUTABLE)
+    }
+
+    private val notificationActionIconTint: Int
+        /**
+         * Gets the notification action icon tint relying on the current theme.
+         * Do NOT cache statically!
+         */
+        get() {
+            // MUST use the application Context to retrieve the default text color of the below
+            // TextAppearance used by the system UI, whose night mode the application Context will
+            // always keep in sync with.
+            return ThemeUtils.getTextAppearanceDefaultTextColor(
+                    applicationContext, R.style.TextAppearance_Compat_Notification_Media)
+        }
+
+    private class MsgHandler : Handler(Looper.getMainLooper()) {
+        override fun handleMessage(msg: Message) {
+            val service = get() ?: return
+
+            when (msg.what) {
+                MediaButtonEventHandler.MSG_PLAY_PAUSE_KEY_SINGLE_TAP ->
+                    service.onTapPlayPause()
+
+                MediaButtonEventHandler.MSG_PLAY_PAUSE_KEY_DOUBLE_TAP,
+                MediaButtonEventHandler.MSG_MEDIA_NEXT ->
+                    service.onTapSkipNext()
+
+                MediaButtonEventHandler.MSG_PLAY_PAUSE_KEY_TRIPLE_TAP,
+                MediaButtonEventHandler.MSG_MEDIA_PREVIOUS ->
+                    service.onTapSkipPrevious()
+            }
+        }
+    }
+
+    companion object {
+        private const val ID_NOTIFICATION = 20220216
+
+        @SuppressLint("StaticFieldLeak")
+        private var sInstance: YoutubePlaybackService? = null
+
+        @JvmField
+        protected val EMPTY_VIDEO: Video = Video()
+
+        private val NotificationDispatcher: CoroutineDispatcher =
+                object : SerialExecutor() {
+                    @Synchronized
+                    override fun execute(r: Runnable) {
+                        // Removes useless pending playback notifications in the middle
+                        // for better performance
+                        clear()
+                        super.execute(r)
+                    }
+                }.asCoroutineDispatcher()
+
+        @JvmStatic
+        fun peekIfNonnullThenDo(consumer: Consumer<YoutubePlaybackService?>) {
+            val service = sInstance
+            if (service != null) {
+                consumer.accept(service)
+            }
+        }
+
+        @JvmStatic
+        fun get(): YoutubePlaybackService? {
+            return sInstance
+        }
+
+        @JvmStatic
+        @JvmOverloads
+        fun startPlaybackIfUrlIsWatchUrl(
+            context: Context, url: String, fromPlaybackView: Boolean = false
+        ): Boolean {
+            val videoId = if (Youtube.REGEX_WATCH_URL.matches(url)) {
+                Youtube.Util.getVideoIdFromWatchUrl(url)
+            } else if (Youtube.REGEX_SHARE_URL.matches(url)) {
+                Youtube.Util.getVideoIdFromShareUrl(url)
+            } else {
+                return false
+            }
+            val playlistId = Youtube.Util.getPlaylistIdFromWatchOrShareUrl(url)
+            val videoIndex = Youtube.Util.getVideoIndexFromWatchOrShareUrl(url)
+            val videoStartMs = Youtube.Util.getVideoStartMsFromWatchOrShareUrl(url)
+
+            startPlayback(context, playlistId, videoId, videoIndex, videoStartMs, fromPlaybackView)
+            return true
+        }
+
+        fun startPlayback(
+            context: Context,
+            playlistId: String?, videoId: String?, videoStartMs: Long,
+            fromPlaybackView: Boolean
+        ) {
+            startPlayback(
+                    context, playlistId, videoId, Constants.UNKNOWN, videoStartMs, fromPlaybackView)
+        }
+
+        @JvmStatic
+        fun startPlayback(
+            context: Context,
+            playlistId: String?, videoId: String?, videoIndex: Int, videoStartMs: Long,
+            fromPlaybackView: Boolean
+        ) {
+            val intent = Intent(context, YoutubePlaybackService::class.java)
+            intent.putExtra(Constants.Extras.PLAYLIST_ID, playlistId)
+            intent.putExtra(Constants.Extras.VIDEO_ID, videoId)
+            intent.putExtra(Constants.Extras.VIDEO_INDEX, videoIndex)
+            intent.putExtra(Constants.Extras.VIDEO_START_MS, videoStartMs)
+            intent.putExtra(Constants.Extras.FROM_PLAYBACK_VIEW, fromPlaybackView)
+            intent.setAction(
+                    if (Utils.isServiceRunning(context, YoutubePlaybackService::class.java))
+                        Constants.Actions.START
+                    else Constants.Actions.START_FOREGROUND)
+            context.startService(intent)
+        }
+    }
+}
\ No newline at end of file
-- 
2.47.0.windows.1

